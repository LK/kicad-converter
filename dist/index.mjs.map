{"version":3,"sources":["../lib/kicad-pcb/convert-circuit-json-to-kicad-pcb.ts","../lib/kicad-pcb/convert-kicad-pcb-to-circuit-json.ts","../lib/kicad-pcb/convert-kicad-pcb-to-sexpr-string.ts","../lib/common/parse-sexpr.ts","../lib/kicad-pcb/zod.ts","../lib/kicad-pcb/parse-kicad-pcb-sexpr.ts","../lib/kicad-pro/convert-circuit-json-to-kicad-pro.ts","../lib/kicad-pro/zod.ts","../lib/kicad-sch/types.ts","../lib/kicad-sch/zod.ts","../lib/kicad-sch/parse-kicad-sch.ts","../lib/kicad-sch/namespace.ts"],"sourcesContent":["import * as CJ from \"@tscircuit/soup\"\nimport type {\n  KiCadPcb,\n  Footprint,\n  Pad,\n  Segment,\n  Net,\n  Via,\n  GrLine,\n  NetReference,\n} from \"./types\"\nimport { transformPCBElements } from \"@tscircuit/soup-util\"\nimport { scale, compose, translate } from \"transformation-matrix\"\nimport { mapTscircuitLayerToKicadLayer } from \"./convert-kicad-pcb-to-circuit-json\"\nimport {\n  ConnectivityMap,\n  getFullConnectivityMapFromCircuitJson,\n} from \"circuit-json-to-connectivity-map\"\n\nexport function convertCircuitJsonToKiCadPcb(\n  circuitJson: CJ.AnyCircuitElement[],\n): KiCadPcb {\n  /**\n   * Use this connectivity map to find the net for any id, e.g.\n   * connMap.getNetConnectedToId(\"source_port_id\") // \"connectivity_net4\"\n   */\n  const connMap = getFullConnectivityMapFromCircuitJson(circuitJson)\n  circuitJson = transformPCBElements(\n    JSON.parse(JSON.stringify(circuitJson)),\n    // Flip the Y axis and translate to center of A4 kicad sheet\n    compose(scale(1, -1), translate(148.5, -105)),\n  ) as any\n\n  const kicadPcb: KiCadPcb = {\n    version: 20240108,\n    generator: \"tscircuit\",\n    generator_version: \"1.0\",\n    general: {\n      thickness: 1.6,\n      legacy_teardrops: false,\n    },\n    paper: \"A4\",\n    layers: [\n      {\n        id: 0,\n        name: \"F.Cu\",\n        type: \"signal\",\n      },\n      {\n        id: 31,\n        name: \"B.Cu\",\n        type: \"signal\",\n      },\n      {\n        id: 32,\n        name: \"B.Adhes\",\n        type: \"user\",\n        description: \"B.Adhesive\",\n      },\n      {\n        id: 33,\n        name: \"F.Adhes\",\n        type: \"user\",\n        description: \"F.Adhesive\",\n      },\n      {\n        id: 34,\n        name: \"B.Paste\",\n        type: \"user\",\n      },\n      {\n        id: 35,\n        name: \"F.Paste\",\n        type: \"user\",\n      },\n      {\n        id: 36,\n        name: \"B.SilkS\",\n        type: \"user\",\n        description: \"B.Silkscreen\",\n      },\n      {\n        id: 37,\n        name: \"F.SilkS\",\n        type: \"user\",\n        description: \"F.Silkscreen\",\n      },\n      {\n        id: 38,\n        name: \"B.Mask\",\n        type: \"user\",\n      },\n      {\n        id: 39,\n        name: \"F.Mask\",\n        type: \"user\",\n      },\n      {\n        id: 40,\n        name: \"Dwgs.User\",\n        type: \"user\",\n        description: \"User.Drawings\",\n      },\n      {\n        id: 41,\n        name: \"Cmts.User\",\n        type: \"user\",\n        description: \"User.Comments\",\n      },\n      {\n        id: 42,\n        name: \"Eco1.User\",\n        type: \"user\",\n        description: \"User.Eco1\",\n      },\n      {\n        id: 43,\n        name: \"Eco2.User\",\n        type: \"user\",\n        description: \"User.Eco2\",\n      },\n      {\n        id: 44,\n        name: \"Edge.Cuts\",\n        type: \"user\",\n      },\n      {\n        id: 45,\n        name: \"Margin\",\n        type: \"user\",\n      },\n      {\n        id: 46,\n        name: \"B.CrtYd\",\n        type: \"user\",\n        description: \"B.Courtyard\",\n      },\n      {\n        id: 47,\n        name: \"F.CrtYd\",\n        type: \"user\",\n        description: \"F.Courtyard\",\n      },\n      {\n        id: 48,\n        name: \"B.Fab\",\n        type: \"user\",\n      },\n      {\n        id: 49,\n        name: \"F.Fab\",\n        type: \"user\",\n      },\n      {\n        id: 50,\n        name: \"User.1\",\n        type: \"user\",\n      },\n      {\n        id: 51,\n        name: \"User.2\",\n        type: \"user\",\n      },\n      {\n        id: 52,\n        name: \"User.3\",\n        type: \"user\",\n      },\n      {\n        id: 53,\n        name: \"User.4\",\n        type: \"user\",\n      },\n      {\n        id: 54,\n        name: \"User.5\",\n        type: \"user\",\n      },\n      {\n        id: 55,\n        name: \"User.6\",\n        type: \"user\",\n      },\n      {\n        id: 56,\n        name: \"User.7\",\n        type: \"user\",\n      },\n      {\n        id: 57,\n        name: \"User.8\",\n        type: \"user\",\n      },\n      {\n        id: 58,\n        name: \"User.9\",\n        type: \"user\",\n      },\n    ],\n    setup: {\n      pad_to_mask_clearance: 0,\n      allow_soldermask_bridges_in_footprints: false,\n      pcbplotparams: {\n        layerselection: \"0x00010fc_ffffffff\",\n        plot_on_all_layers_selection: \"0x0000000_00000000\",\n        disableapertmacros: false,\n        usegerberextensions: false,\n        usegerberattributes: true,\n        usegerberadvancedattributes: true,\n        creategerberjobfile: true,\n        svgprecision: 4,\n        // @ts-expect-error\n        excludeedgelayer: true,\n        plotframeref: false,\n        viasonmask: false,\n        mode: 1,\n        useauxorigin: false,\n        hpglpennumber: 1,\n        hpglpenspeed: 20,\n        hpglpendiameter: 15,\n        dxfpolygonmode: true,\n        dxfimperialunits: true,\n        dxfusepcbnewfont: true,\n        psnegative: false,\n        psa4output: false,\n        plotreference: true,\n        plotvalue: true,\n        plotinvisibletext: false,\n        sketchpadsonfab: false,\n        subtractmaskfromsilk: false,\n        outputformat: 1,\n        mirror: false,\n        drillshape: 1,\n        scaleselection: 1,\n        outputdirectory: \"\",\n      },\n    },\n    nets: [],\n    footprints: [],\n    segments: [],\n    vias: [],\n  }\n\n  circuitJson.forEach((element) => {\n    switch (element.type) {\n      case \"pcb_component\":\n        kicadPcb.footprints.push(\n          convertPcbComponentToFootprint(element, circuitJson, connMap),\n        )\n        break\n      case \"pcb_trace\":\n        kicadPcb.segments.push(...convertPcbTraceToSegments(element, connMap))\n        break\n      case \"pcb_via\":\n        kicadPcb.vias.push(convertPcbViaToVia(element as CJ.PCBVia, connMap))\n        break\n      case \"pcb_hole\":\n        kicadPcb.footprints.push(\n          convertPcbHoleToFootprint(element as CJ.PCBHole),\n        )\n        break\n      case \"pcb_plated_hole\":\n        kicadPcb.footprints.push(\n          convertPcbPlatedHoleToFootprint(element as CJ.PCBPlatedHole, connMap),\n        )\n        break\n      case \"pcb_board\":\n        kicadPcb.gr_lines = convertPcbBoardToEdgeCuts(element as CJ.PCBBoard)\n        break\n    }\n  })\n\n  // Add nets to KiCad PCB\n  for (const [netId, connections] of Object.entries(connMap.netMap)) {\n    kicadPcb.nets.push({\n      id: netIdToNumber(netId),\n      name: netId,\n    })\n  }\n\n  return kicadPcb\n}\n\nfunction convertPcbBoardToEdgeCuts(board: CJ.PCBBoard): GrLine[] {\n  const edgeCuts: GrLine[] = []\n  const outline = board.outline || [\n    {\n      x: board.center.x - board.width / 2,\n      y: board.center.y + board.height / 2,\n    },\n    {\n      x: board.center.x + board.width / 2,\n      y: board.center.y + board.height / 2,\n    },\n    {\n      x: board.center.x + board.width / 2,\n      y: board.center.y - board.height / 2,\n    },\n    {\n      x: board.center.x - board.width / 2,\n      y: board.center.y - board.height / 2,\n    },\n  ]\n\n  for (let i = 0; i < outline.length; i++) {\n    const start = outline[i]\n    const end = outline[(i + 1) % outline.length]\n    edgeCuts.push({\n      start: [start.x, start.y],\n      end: [end.x, end.y],\n      layer: \"Edge.Cuts\",\n      width: 0.1,\n    })\n  }\n\n  return edgeCuts\n}\n\nfunction convertPcbViaToVia(via: CJ.PCBVia, connMap: ConnectivityMap): Via {\n  return {\n    at: [via.x, via.y],\n    size: via.outer_diameter,\n    drill: via.hole_diameter,\n    layers: via.layers.map((l) => mapTscircuitLayerToKicadLayer(l)!),\n    // TODO: Waiting on pcb_trace_id being available in Circuit JSON before we\n    // can add nets for vias\n    net: 0,\n    uuid: `via_${via.x}_${via.y}`,\n  }\n}\n\nfunction convertPcbHoleToFootprint(hole: CJ.PCBHole): Footprint {\n  // @ts-ignore\n  if (hole.hole_shape === \"round\") hole.hole_shape = \"circle\"\n\n  if (hole.hole_shape === \"circle\") {\n    return {\n      footprint: \"MountingHole\",\n      layer: \"F.Cu\",\n      uuid: hole.pcb_hole_id || generateUniqueId(),\n      at: { x: hole.x, y: hole.y },\n      pads: [\n        {\n          type: \"np_thru_hole\",\n          shape: \"circle\",\n          at: [0, 0],\n          size: [hole.hole_diameter, hole.hole_diameter],\n          drill: hole.hole_diameter,\n          layers: [\"*.Cu\", \"*.Mask\"],\n          number: \"\",\n        },\n      ],\n    }\n  } else if (hole.hole_shape === \"oval\") {\n    return {\n      footprint: \"MountingHole\",\n      layer: \"F.Cu\",\n      uuid: hole.pcb_hole_id || generateUniqueId(),\n      at: { x: hole.x, y: hole.y },\n      pads: [\n        {\n          type: \"np_thru_hole\",\n          shape: \"circle\",\n          at: [0, 0],\n          size: [hole.hole_width, hole.hole_height],\n          drill: hole.hole_width,\n          layers: [\"*.Cu\", \"*.Mask\"],\n          number: \"\",\n        },\n      ],\n    }\n  } else if (hole.hole_shape === \"square\") {\n    return {\n      footprint: \"MountingHole\",\n      layer: \"F.Cu\",\n      uuid: hole.pcb_hole_id || generateUniqueId(),\n      at: { x: hole.x, y: hole.y },\n      pads: [\n        {\n          type: \"np_thru_hole\",\n          shape: \"rect\",\n          at: [0, 0],\n          size: [hole.hole_diameter, hole.hole_diameter],\n          drill: hole.hole_diameter,\n          layers: [\"*.Cu\", \"*.Mask\"],\n          number: \"\",\n        },\n      ],\n    }\n  }\n  throw new Error(`Unknown hole shape: ${hole.hole_shape}`)\n}\n\nfunction convertPcbPlatedHoleToFootprint(\n  platedHole: CJ.PCBPlatedHole,\n  connMap: ConnectivityMap,\n): Footprint {\n  const number = platedHole.port_hints?.find((ph) => ph.match(/^\\d+$/)) || \"\"\n  if (platedHole.shape === \"circle\") {\n    return {\n      footprint: \"PlatedHole\",\n      layer: \"F.Cu\", // Assuming top layer, adjust if needed\n      uuid: platedHole.pcb_plated_hole_id || generateUniqueId(),\n      at: { x: platedHole.x, y: platedHole.y },\n      pads: [\n        {\n          type: \"thru_hole\",\n          shape: platedHole.shape === \"circle\" ? \"circle\" : \"rect\",\n          at: [0, 0],\n          size: [platedHole.outer_diameter, platedHole.outer_diameter],\n          drill: platedHole.hole_diameter,\n          layers: platedHole.layers.map(\n            (l) => mapTscircuitLayerToKicadLayer(l)!,\n          ),\n          net: netIdToNetRef(\n            connMap.getNetConnectedToId(platedHole.pcb_plated_hole_id!)!,\n          ),\n          number,\n        },\n      ],\n    }\n  } else if (platedHole.shape === \"oval\" || platedHole.shape === \"pill\") {\n    // TODO handle pill shape properly\n    return {\n      footprint: \"PlatedHole\",\n      layer: \"F.Cu\", // Assuming top layer, adjust if needed\n      uuid: platedHole.pcb_plated_hole_id || generateUniqueId(),\n      at: { x: platedHole.x, y: platedHole.y },\n      pads: [\n        {\n          type: \"thru_hole\",\n          shape: \"oval\",\n          at: [0, 0],\n          size: [platedHole.outer_width, platedHole.outer_height],\n          drill: platedHole.hole_width,\n          layers: platedHole.layers.map(\n            (l) => mapTscircuitLayerToKicadLayer(l)!,\n          ),\n          net: netIdToNetRef(\n            connMap.getNetConnectedToId(platedHole.pcb_plated_hole_id!)!,\n          ),\n          number,\n        },\n      ],\n    }\n  }\n  throw new Error(`Unknown plated hole shape: ${platedHole.shape}`)\n}\n\nfunction generateUniqueId(): string {\n  return \"id_\" + Math.random().toString(36).substr(2, 9)\n}\n\nfunction convertPcbComponentToFootprint(\n  component: CJ.PcbComponent,\n  allElements: CJ.AnyCircuitElement[],\n  connMap: ConnectivityMap,\n): Footprint {\n  const footprint: Footprint = {\n    footprint: component.source_component_id,\n    layer: component.layer === \"top\" ? \"F.Cu\" : \"B.Cu\",\n    uuid: component.pcb_component_id,\n    at: {\n      x: component.center.x,\n      y: component.center.y,\n      // We don't rotate because Circuit JSON coordinates are pre-rotated\n      // rotation: component.rotation ? parseFloat(component.rotation) : 0,\n    },\n    pads: [],\n  }\n\n  for (const elm of allElements) {\n    if (\n      elm.type === \"pcb_smtpad\" &&\n      elm.pcb_component_id === component.pcb_component_id\n    ) {\n      const kicadPad = convertPcbSmtPadToPad(elm, component, connMap)\n      if (kicadPad) footprint.pads?.push(kicadPad)\n    }\n  }\n\n  return footprint\n}\n\nfunction mapToKicadLayer(layer: CJ.LayerRef): string | undefined {\n  const CJ_LAYER_TO_KICAD_LAYER: Partial<Record<CJ.LayerRef, string>> = {\n    top: \"F.Cu\",\n    bottom: \"B.Cu\",\n  }\n  return CJ_LAYER_TO_KICAD_LAYER[layer]\n}\n\nfunction convertPcbSmtPadToPad(\n  pad: CJ.PCBSMTPad,\n  component: CJ.PcbComponent,\n  connMap: ConnectivityMap,\n): Pad | null {\n  if (pad.shape === \"rect\") {\n    return {\n      number: pad.port_hints?.find((ph) => ph.match(/^\\d+$/)) || \"\",\n      type: \"smd\",\n      net: netIdToNetRef(connMap.getNetConnectedToId(pad.pcb_smtpad_id)!),\n      shape: \"roundrect\",\n      at: [pad.x - component.center.x, pad.y - component.center.y],\n      size: [pad.width, pad.height],\n      layers: [mapToKicadLayer(pad.layer)].filter(Boolean) as string[],\n    }\n  }\n  return null\n}\n\nfunction netIdToNetRef(netId: string): NetReference {\n  return {\n    id: netIdToNumber(netId),\n    name: netId,\n  }\n}\n\nfunction convertPcbTraceToSegments(\n  trace: CJ.PCBTrace,\n  connMap: ConnectivityMap,\n): Segment[] {\n  const segments: Segment[] = []\n  const netId = netIdToNumber(\n    connMap.getNetConnectedToId(trace.source_trace_id!)!,\n  )\n\n  for (let i = 0; i < trace.route.length - 1; i++) {\n    const start = trace.route[i]\n    const end = trace.route[i + 1]\n    segments.push({\n      start: [start.x, start.y],\n      end: [end.x, end.y],\n      width:\n        // @ts-expect-error\n        trace.route_thickness_mode === \"constant\" ? trace.route[0].width : 0.2, // Default width if not constant\n      // @ts-expect-error\n      layer: start.layer === \"top\" ? \"F.Cu\" : \"B.Cu\",\n      net: netId,\n    })\n  }\n\n  return segments\n}\n\nfunction netIdToNumber(netId: string): number {\n  if (!netId) return 0\n  if (netId.startsWith(\"connectivity_net\")) {\n    return parseInt(netId.replace(\"connectivity_net\", \"\"))\n  }\n  return 0\n}\n","import type { Footprint, GrRect, KiCadPcb, Pad, Segment, Via } from \"./types\"\nimport * as CJ from \"@tscircuit/soup\"\nimport { transformPCBElements } from \"@tscircuit/soup-util\"\nimport { scale } from \"transformation-matrix\"\n\nexport function convertKiCadPcbToCircuitJson(\n  kicadPcb: KiCadPcb,\n): CJ.AnyCircuitElement[] {\n  const circuitJsonArray: CJ.AnyCircuitElement[] = []\n\n  // Convert footprints to pcb_components\n  if (kicadPcb.footprints) {\n    for (const footprint of kicadPcb.footprints) {\n      // const pcbComponent = convertFootprintToPcbComponent(footprint)\n      // circuitJsonArray.push(pcbComponent)\n\n      // Convert pads to pcb_smtpad or pcb_plated_hole\n      if (footprint.pads) {\n        for (const pad of footprint.pads) {\n          const pcbPads = convertPadToPcbPad(pad, footprint)\n          circuitJsonArray.push(...pcbPads)\n        }\n      }\n    }\n  }\n\n  // Convert segments to pcb_traces\n  if (kicadPcb.segments) {\n    const segmentsByNet = groupSegmentsByNet(kicadPcb.segments)\n    for (const netId in segmentsByNet) {\n      const segments = segmentsByNet[netId]\n      const pcbTraces = convertSegmentsToPcbTraces(segments, netId)\n      circuitJsonArray.push(...pcbTraces)\n    }\n  }\n\n  if (kicadPcb.vias) {\n    for (const via of kicadPcb.vias) {\n      const pcbVia = convertViaToPcbVia(via)\n      circuitJsonArray.push(pcbVia)\n    }\n  }\n\n  // Convert gr_rects to pcb_silkscreen_rect\n  // if (kicadPcb.gr_rects) {\n  //   for (const grRect of kicadPcb.gr_rects) {\n  //     const silkscreenRect = convertGrRectToSilkscreen(grRect)\n  //     circuitJsonArray.push(silkscreenRect)\n  //   }\n  // }\n\n  // Center the circuit about (0,0)\n\n  // Flip Y axis to match KiCad\n  transformPCBElements(circuitJsonArray, scale(1, -1))\n\n  return circuitJsonArray\n}\n\n// Helper function to generate unique IDs\nfunction generateUniqueId(): string {\n  return \"id_\" + Math.random().toString(36).substr(2, 9)\n}\n\n// Convert KiCad Footprint to pcb_component\nfunction convertFootprintToPcbComponent(footprint: Footprint): CJ.PcbComponent {\n  return CJ.pcb_component.parse({\n    type: \"pcb_component\",\n    pcb_component_id: footprint.uuid || generateUniqueId(),\n    source_component_id: footprint.footprint,\n    center: {\n      x: footprint.at.x,\n      y: footprint.at.y,\n    },\n    layer: mapKicadLayerToTscircuitLayer(footprint.layer),\n    rotation: CJ.rotation.parse(\n      footprint.at.rotation ? `${footprint.at.rotation}deg` : \"0deg\",\n    ),\n  })\n}\n\n// Convert KiCad Pad to pcb_smtpad or pcb_plated_hole\nfunction convertPadToPcbPad(\n  pad: Pad,\n  footprint: Footprint,\n): (CJ.PCBSMTPad | CJ.PCBPlatedHole | CJ.PCBHole)[] {\n  const pads: (CJ.PCBSMTPad | CJ.PCBPlatedHole | CJ.PCBHole)[] = []\n  const position = {\n    x: pad.at[0] + footprint.at.x,\n    y: pad.at[1] + footprint.at.y,\n  }\n\n  const padShape = pad.shape.toLowerCase()\n\n  if (pad.type === \"smd\") {\n    for (const kicadLayer of pad.layers) {\n      const layer = mapKicadLayerToTscircuitLayer(kicadLayer)\n      if (!layer) continue\n      const pcb_smtpad = CJ.pcb_smtpad.safeParse({\n        type: \"pcb_smtpad\",\n        pcb_smtpad_id: pad.uuid || generateUniqueId(),\n        shape: padShape === \"roundrect\" ? \"rect\" : padShape,\n        x: position.x,\n        y: position.y,\n        width: pad.size[0],\n        height: pad.size[1],\n        layer: layer,\n        port_hints: [pad.number],\n        pcb_component_id: footprint.uuid || generateUniqueId(),\n        pcb_port_id: pad.uuid || generateUniqueId(),\n      })\n\n      if (pcb_smtpad.success) {\n        pads.push(pcb_smtpad.data)\n      } else {\n        console.warn(\n          `Failed to parse pcb_smtpad \"${pad.uuid}\"`,\n          pcb_smtpad.error,\n        )\n      }\n    }\n  } else if (pad.type === \"thru_hole\") {\n    const isCircular = pad.size[0] === pad.size[1]\n    const pcb_plated_hole = CJ.pcb_plated_hole.safeParse(\n      isCircular\n        ? {\n            type: \"pcb_plated_hole\",\n            pcb_plated_hole_id: pad.uuid || generateUniqueId(),\n            shape: \"circle\",\n            x: position.x,\n            y: position.y,\n            outer_diameter: pad.size[0],\n            hole_diameter: pad.drill || pad.size[0] * 0.5, // Use drill size if available, otherwise assume half the pad size\n            layers: pad.layers\n              .map(mapKicadLayerToTscircuitLayer)\n              .filter(Boolean) as CJ.LayerRef[],\n            port_hints: [pad.number],\n            pcb_component_id: footprint.uuid || generateUniqueId(),\n            pcb_port_id: pad.uuid || generateUniqueId(),\n          }\n        : {\n            type: \"pcb_plated_hole\",\n            pcb_plated_hole_id: pad.uuid || generateUniqueId(),\n            shape: padShape === \"oval\" ? \"oval\" : \"pill\",\n            x: position.x,\n            y: position.y,\n            outer_width: pad.size[0],\n            outer_height: pad.size[1],\n            hole_width: pad.drill || pad.size[0] * 0.5,\n            hole_height: pad.drill || pad.size[1] * 0.5,\n            layers: pad.layers\n              .map(mapKicadLayerToTscircuitLayer)\n              .filter(Boolean) as CJ.LayerRef[],\n            port_hints: [pad.number],\n            pcb_component_id: footprint.uuid || generateUniqueId(),\n            pcb_port_id: pad.uuid || generateUniqueId(),\n          },\n    )\n\n    if (pcb_plated_hole.success) {\n      pads.push(pcb_plated_hole.data)\n    } else {\n      console.warn(\n        `Failed to parse pcb_plated_hole \"${pad.uuid}\"`,\n        pcb_plated_hole.error,\n      )\n    }\n  } else if (pad.type === \"np_thru_hole\") {\n    const pcb_hole = CJ.pcb_hole.parse({\n      type: \"pcb_hole\",\n      pcb_hole_id: pad.uuid || generateUniqueId(),\n      shape: \"circle\",\n      x: position.x,\n      y: position.y,\n      outer_diameter: pad.size[0],\n      hole_diameter: pad.drill || pad.size[0] * 0.5,\n    })\n\n    pads.push(pcb_hole)\n  }\n  return pads\n}\n\n// Group KiCad segments by net ID\nfunction groupSegmentsByNet(segments: Segment[]): {\n  [netId: number]: Segment[]\n} {\n  const segmentsByNet: { [netId: number]: Segment[] } = {}\n  for (const segment of segments) {\n    if (!segmentsByNet[segment.net]) {\n      segmentsByNet[segment.net] = []\n    }\n    segmentsByNet[segment.net].push(segment)\n  }\n  return segmentsByNet\n}\n\n// Convert KiCad segments to pcb_traces\nfunction convertSegmentsToPcbTraces(segments: Segment[], netId: string): any[] {\n  const pcbTraces: CJ.PCBTrace[] = []\n\n  for (const segment of segments) {\n    const route = [\n      {\n        route_type: \"wire\",\n        x: segment.start[0],\n        y: segment.start[1],\n        width: segment.width,\n        layer: mapKicadLayerToTscircuitLayer(segment.layer),\n      } as CJ.PCBTrace[\"route\"][number],\n      {\n        route_type: \"wire\",\n        x: segment.end[0],\n        y: segment.end[1],\n        width: segment.width,\n        layer: mapKicadLayerToTscircuitLayer(segment.layer),\n      } as CJ.PCBTrace[\"route\"][number],\n    ]\n\n    pcbTraces.push(\n      CJ.pcb_trace.parse({\n        type: \"pcb_trace\",\n        pcb_trace_id: segment.uuid || generateUniqueId(),\n        source_trace_id: `net_${segment.net}`,\n        route_thickness_mode: \"constant\",\n        should_round_corners: false,\n        route: route,\n      }),\n    )\n  }\n\n  return pcbTraces\n}\n\n// Convert KiCad gr_rect to pcb_silkscreen_rect\nfunction convertGrRectToSilkscreen(grRect: GrRect) {\n  const centerX = (grRect.start[0] + grRect.end[0]) / 2\n  const centerY = (grRect.start[1] + grRect.end[1]) / 2\n  const width = Math.abs(grRect.end[0] - grRect.start[0])\n  const height = Math.abs(grRect.end[1] - grRect.start[1])\n\n  return CJ.pcb_silkscreen_rect.parse({\n    type: \"pcb_silkscreen_rect\",\n    pcb_silkscreen_rect_id: grRect.uuid || generateUniqueId(),\n    center: {\n      x: `${centerX}mm`,\n      y: `${centerY}mm`,\n    },\n    width: `${width}mm`,\n    height: `${height}mm`,\n    layer: mapKicadLayerToTscircuitLayer(grRect.layer),\n  })\n}\n\n// Convert KiCad Via to pcb_via\nfunction convertViaToPcbVia(via: Via): CJ.PCBVia {\n  return CJ.pcb_via.parse({\n    type: \"pcb_via\",\n    x: `${via.at[0]}mm`,\n    y: `${via.at[1]}mm`,\n    outer_diameter: `${via.size}mm`,\n    hole_diameter: `${via.drill}mm`,\n    layers: via.layers\n      .map(mapKicadLayerToTscircuitLayer)\n      .filter((layer): layer is CJ.LayerRef => layer !== null),\n  })\n}\n\n// Map KiCad layer names to CircuitJSON layer references\nexport function mapKicadLayerToTscircuitLayer(\n  kicadLayer: string,\n): CJ.LayerRef | null {\n  const layerMap: { [key: string]: CJ.LayerRef } = {\n    \"F.Cu\": \"top\",\n    \"B.Cu\": \"bottom\",\n    \"F.SilkS\": \"top\",\n    \"B.SilkS\": \"bottom\",\n    // Add other necessary mappings for via layers\n    \"In1.Cu\": \"inner1\",\n    \"In2.Cu\": \"inner2\",\n    // ... add more inner layers as needed\n  }\n  return layerMap[kicadLayer] ?? null\n}\n\nexport function mapTscircuitLayerToKicadLayer(\n  tscircuitLayer: CJ.LayerRef,\n): string | null {\n  const layerMap: { [key: string]: string } = {\n    top: \"F.Cu\",\n    bottom: \"B.Cu\",\n    inner1: \"In1.Cu\",\n    inner2: \"In2.Cu\",\n  }\n  return layerMap[tscircuitLayer] ?? null\n}\n","import type {\n  KiCadPcb,\n  Footprint,\n  Pad,\n  Segment,\n  Net,\n  Layer,\n  PcbPlotParams,\n  Via,\n  GrLine,\n} from \"./types\"\n\nexport function convertKiCadPcbToSExprString(kicadPcb: KiCadPcb): string {\n  const lines: string[] = []\n\n  lines.push(\"(kicad_pcb\")\n  lines.push(`  (version ${kicadPcb.version})`)\n  lines.push(`  (generator \"${kicadPcb.generator}\")`)\n  lines.push(`  (generator_version \"${kicadPcb.generator_version}\")`)\n\n  // General\n  lines.push(\"  (general\")\n  lines.push(`    (thickness ${kicadPcb.general.thickness})`)\n  lines.push(\n    `    (legacy_teardrops ${kicadPcb.general.legacy_teardrops ? \"yes\" : \"no\"})`,\n  )\n  lines.push(\"  )\")\n\n  lines.push(`  (paper \"${kicadPcb.paper}\")`)\n\n  // Layers\n  lines.push(\"  (layers\")\n  kicadPcb.layers.forEach((layer) => {\n    lines.push(`    ${convertLayerToSExpr(layer)}`)\n  })\n  lines.push(\"  )\")\n\n  // Setup\n  lines.push(\"  (setup\")\n  lines.push(\n    `    (pad_to_mask_clearance ${kicadPcb.setup.pad_to_mask_clearance})`,\n  )\n  lines.push(\n    `    (allow_soldermask_bridges_in_footprints ${kicadPcb.setup.allow_soldermask_bridges_in_footprints ? \"yes\" : \"no\"})`,\n  )\n  lines.push(`    (pcbplotparams`)\n  lines.push(convertPcbPlotParamsToSExpr(kicadPcb.setup.pcbplotparams))\n  lines.push(\"    )\")\n  lines.push(\"  )\")\n\n  // Nets\n  kicadPcb.nets.forEach((net) => {\n    lines.push(`  (net ${net.id} \"${net.name}\")`)\n  })\n\n  // Footprints\n  kicadPcb.footprints.forEach((footprint) => {\n    lines.push(convertFootprintToSExpr(footprint))\n  })\n\n  // Segments\n  kicadPcb.segments.forEach((segment) => {\n    lines.push(convertSegmentToSExpr(segment))\n  })\n\n  // Vias\n  kicadPcb.vias?.forEach((via) => {\n    lines.push(convertViaToSExpr(via))\n  })\n\n  // GrLines (Edge Cuts)\n  kicadPcb.gr_lines?.forEach((grLine) => {\n    lines.push(convertGrLineToSExpr(grLine))\n  })\n\n  lines.push(\")\")\n\n  return lines.join(\"\\n\")\n}\n\nfunction convertLayerToSExpr(layer: Layer): string {\n  return `(${layer.id} \"${layer.name}\" ${layer.type}${layer.description ? ` \"${layer.description}\"` : \"\"})`\n}\n\nfunction convertPcbPlotParamsToSExpr(params: PcbPlotParams): string {\n  const lines: string[] = []\n  Object.entries(params).forEach(([key, value]) => {\n    if (typeof value === \"boolean\") {\n      lines.push(`      (${key} ${value ? \"yes\" : \"no\"})`)\n    } else if (typeof value === \"number\") {\n      lines.push(`      (${key} ${value})`)\n    } else {\n      lines.push(`      (${key} \"${value}\")`)\n    }\n  })\n  return lines.join(\"\\n\")\n}\n\nfunction convertFootprintToSExpr(footprint: Footprint): string {\n  const lines: string[] = []\n  lines.push(`  (footprint \"${footprint.footprint}\"`)\n  lines.push(`    (layer \"${footprint.layer}\")`)\n  lines.push(`    (uuid ${footprint.uuid})`)\n  lines.push(\n    `    (at ${footprint.at.x} ${footprint.at.y}${footprint.at.rotation ? ` ${footprint.at.rotation}` : \"\"})`,\n  )\n\n  if (footprint.descr) lines.push(`    (descr \"${footprint.descr}\")`)\n  if (footprint.tags) lines.push(`    (tags \"${footprint.tags}\")`)\n\n  footprint.pads?.forEach((pad) => {\n    lines.push(convertPadToSExpr(pad))\n  })\n\n  lines.push(\"  )\")\n  return lines.join(\"\\n\")\n}\n\nfunction convertPadToSExpr(pad: Pad): string {\n  const lines: string[] = []\n  lines.push(`    (pad \"${pad.number}\" ${pad.type} ${pad.shape}`)\n  lines.push(`      (at ${pad.at[0]} ${pad.at[1]})`)\n  lines.push(`      (size ${pad.size[0]} ${pad.size[1]})`)\n  lines.push(`      (layers ${pad.layers.join(\" \")})`)\n  if (pad.net) {\n    lines.push(`      (net ${pad.net.id} \"${pad.net.name}\")`)\n  }\n  if (pad.drill) {\n    lines.push(`      (drill ${pad.drill})`)\n  }\n  lines.push(\"    )\")\n  return lines.join(\"\\n\")\n}\n\nfunction convertSegmentToSExpr(segment: Segment): string {\n  return `  (segment (start ${segment.start[0]} ${segment.start[1]}) (end ${segment.end[0]} ${segment.end[1]}) (width ${segment.width}) (layer \"${segment.layer}\") (net ${segment.net}))`\n}\n\nfunction surroundWithQuotes(value: string): string {\n  return `\"${value}\"`\n}\n\nfunction convertViaToSExpr(via: Via): string {\n  return `  (via (at ${via.at[0]} ${via.at[1]}) (size ${via.size}) (drill ${via.drill}) (layers ${via.layers.map(surroundWithQuotes).join(\" \")}) (net ${via.net})${via.uuid ? ` (uuid \"${via.uuid}\")` : \"\"})`\n}\n\nfunction convertGrLineToSExpr(grLine: GrLine): string {\n  return `  (gr_line (start ${grLine.start[0]} ${grLine.start[1]}) (end ${grLine.end[0]} ${grLine.end[1]}) (layer \"${grLine.layer}\") (width ${grLine.width}))`\n}\n","// Utility types for parsing\nexport type SExpr = string | SExpr[]\n\nexport function parseSExpr(input: string): SExpr {\n  const tokens = tokenize(input)\n  const [expr, _] = parseTokens(tokens)\n\n  // If expr is an array and the first element is another array, unwrap it\n  if (Array.isArray(expr) && expr.length === 1 && Array.isArray(expr[0])) {\n    return expr[0]\n  }\n  return expr\n}\n\nfunction tokenize(input: string): string[] {\n  const tokens: string[] = []\n  let current = \"\"\n  let inString = false\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i]\n\n    if (char === '\"') {\n      if (inString) {\n        // End of string\n        tokens.push(current)\n        current = \"\"\n        inString = false\n      } else {\n        // Start of string\n        inString = true\n      }\n    } else if (inString) {\n      current += char\n    } else if (/\\s/.test(char)) {\n      if (current !== \"\") {\n        tokens.push(current)\n        current = \"\"\n      }\n    } else if (char === \"(\" || char === \")\") {\n      if (current !== \"\") {\n        tokens.push(current)\n        current = \"\"\n      }\n      tokens.push(char)\n    } else {\n      current += char\n    }\n  }\n  if (current !== \"\") {\n    tokens.push(current)\n  }\n  return tokens\n}\n\nfunction parseTokens(tokens: string[], index = 0): [SExpr, number] {\n  const result: SExpr[] = []\n\n  while (index < tokens.length) {\n    const token = tokens[index]\n\n    if (token === \"(\") {\n      index += 1\n      const [expr, newIndex] = parseTokens(tokens, index)\n      result.push(expr)\n      index = newIndex\n    } else if (token === \")\") {\n      return [result, index + 1]\n    } else {\n      result.push(token)\n      index += 1\n    }\n  }\n  return [result, index]\n}\n","import { z } from \"zod\"\n\nexport const yesnobool = z\n  .union([z.literal(\"yes\"), z.literal(\"no\"), z.boolean()])\n  .transform((v) => v === \"yes\" || v === true)\n\n// General settings of the PCB\nexport const GeneralSchema = z.object({\n  thickness: z.number(),\n  legacy_teardrops: yesnobool,\n})\nexport type ZodGeneral = z.infer<typeof GeneralSchema>\n\n// Layer definition\nexport const LayerSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  type: z.string(),\n  description: z.string().optional(),\n})\nexport type ZodLayer = z.infer<typeof LayerSchema>\n\n// PCB Plot Parameters\nexport const PcbPlotParamsSchema = z.object({\n  layerselection: z.string().optional(),\n  plot_on_all_layers_selection: z.string(),\n  disableapertmacros: yesnobool.optional(),\n  usegerberextensions: yesnobool.optional(),\n  usegerberattributes: yesnobool.optional(),\n  usegerberadvancedattributes: yesnobool.optional(),\n  creategerberjobfile: yesnobool.optional(),\n  dashed_line_dash_ratio: z.number().optional(),\n  dashed_line_gap_ratio: z.number().optional(),\n  svgprecision: z.number(),\n  plotframeref: yesnobool.optional(),\n  viasonmask: yesnobool.optional(),\n  mode: z.number().optional(),\n  useauxorigin: yesnobool.optional(),\n  hpglpennumber: z.number(),\n  hpglpenspeed: z.number().optional(),\n  hpglpendiameter: z.number().optional(),\n  pdf_front_fp_property_popups: yesnobool.optional(),\n  pdf_back_fp_property_popups: yesnobool.optional(),\n  dxfpolygonmode: yesnobool.optional(),\n  dxfimperialunits: yesnobool.optional(),\n  dxfusepcbnewfont: yesnobool.optional(),\n  psnegative: yesnobool.optional(),\n  psa4output: yesnobool.optional(),\n  plotreference: yesnobool.optional(),\n  plotvalue: yesnobool.optional(),\n  plotfptext: yesnobool.optional(),\n  plotinvisibletext: yesnobool.optional(),\n  sketchpadsonfab: yesnobool.optional(),\n  subtractmaskfromsilk: yesnobool.optional(),\n  outputformat: z.number().optional(),\n  mirror: yesnobool.optional(),\n  drillshape: z.number().optional(),\n  scaleselection: z.number().optional(),\n  outputdirectory: z.string().optional(),\n})\nexport type ZodPcbPlotParams = z.infer<typeof PcbPlotParamsSchema>\n\n// Setup configurations\nexport const SetupSchema = z.object({\n  pad_to_mask_clearance: z.number(),\n  allow_soldermask_bridges_in_footprints: yesnobool,\n  pcbplotparams: PcbPlotParamsSchema,\n})\nexport type ZodSetup = z.infer<typeof SetupSchema>\n\n// Net definition\nexport const NetSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n})\nexport type ZodNet = z.infer<typeof NetSchema>\n\n// Positioning data\nexport const AtSchema = z.object({\n  x: z.number(),\n  y: z.number(),\n  rotation: z.number().optional(),\n})\nexport type ZodAt = z.infer<typeof AtSchema>\n\n// Font specifications\nexport const FontSchema = z.object({\n  size: z.tuple([z.number(), z.number()]),\n  thickness: z.number(),\n})\nexport type ZodFont = z.infer<typeof FontSchema>\n\n// Text effects\nexport const EffectsSchema = z.object({\n  font: FontSchema.optional(),\n})\nexport type ZodEffects = z.infer<typeof EffectsSchema>\n\n// Property within a footprint\nexport const PropertySchema = z.object({\n  name: z.string(),\n  value: z.string(),\n  at: AtSchema.optional(),\n  layer: z.string().optional(),\n  uuid: z.string().optional(),\n  unlocked: z.boolean().optional(),\n  hide: z.boolean().optional(),\n  effects: EffectsSchema.optional(),\n})\nexport type ZodProperty = z.infer<typeof PropertySchema>\n\n// Stroke style\nexport const StrokeSchema = z.object({\n  width: z.number(),\n  type: z.string(),\n})\nexport type ZodStroke = z.infer<typeof StrokeSchema>\n\n// Footprint line element\nexport const FpLineSchema = z.object({\n  start: z.tuple([z.number(), z.number()]),\n  end: z.tuple([z.number(), z.number()]),\n  stroke: StrokeSchema,\n  layer: z.string(),\n  uuid: z.string().optional(),\n})\nexport type ZodFpLine = z.infer<typeof FpLineSchema>\n\n// Footprint text element\nexport const FpTextSchema = z.object({\n  type: z.string(),\n  text: z.string(),\n  at: AtSchema,\n  layer: z.string(),\n  uuid: z.string().optional(),\n  effects: EffectsSchema.optional(),\n})\nexport type ZodFpText = z.infer<typeof FpTextSchema>\n\n// Reference to a net\nexport const NetReferenceSchema = z.object({\n  id: z.number(),\n  name: z.string().optional(),\n})\nexport type ZodNetReference = z.infer<typeof NetReferenceSchema>\n\n// Pad within a footprint\nexport const PadSchema = z.object({\n  number: z.string(),\n  type: z.enum([\"thru_hole\", \"np_thru_hole\", \"smd\"]),\n  shape: z.enum([\"rect\", \"roundrect\", \"oval\", \"circle\"]),\n  drill: z.number().optional(),\n  at: z.tuple([z.number(), z.number()]),\n  size: z.tuple([z.number(), z.number()]),\n  layers: z.array(z.string()),\n  roundrect_rratio: z.number().optional(),\n  net: NetReferenceSchema.optional(),\n  pintype: z.string().optional(),\n  uuid: z.string().optional(),\n})\nexport type ZodPad = z.infer<typeof PadSchema>\n\n// 3D model information\nexport const ModelSchema = z.object({\n  path: z.string(),\n  offset: z\n    .object({\n      xyz: z.tuple([z.number(), z.number(), z.number()]),\n    })\n    .optional(),\n  scale: z\n    .object({\n      xyz: z.tuple([z.number(), z.number(), z.number()]),\n    })\n    .optional(),\n  rotate: z\n    .object({\n      xyz: z.tuple([z.number(), z.number(), z.number()]),\n    })\n    .optional(),\n})\nexport type ZodModel = z.infer<typeof ModelSchema>\n\n// Footprint definition\nexport const FootprintSchema = z.object({\n  footprint: z.string(),\n  layer: z.string(),\n  uuid: z.string(),\n  at: AtSchema,\n  descr: z.string().optional(),\n  tags: z.string().optional(),\n  properties: z.array(PropertySchema).optional(),\n  path: z.string().optional(),\n  sheetname: z.string().optional(),\n  sheetfile: z.string().optional(),\n  attr: z.string().optional(),\n  fp_lines: z.array(FpLineSchema).optional(),\n  fp_texts: z.array(FpTextSchema).optional(),\n  pads: z.array(PadSchema).optional(),\n  model: ModelSchema.optional(),\n})\nexport type ZodFootprint = z.infer<typeof FootprintSchema>\n\n// Graphical rectangle element\nexport const GrRectSchema = z.object({\n  start: z.tuple([z.number(), z.number()]),\n  end: z.tuple([z.number(), z.number()]),\n  stroke: StrokeSchema,\n  fill: z.string(),\n  layer: z.string(),\n  uuid: z.string().optional(),\n})\nexport type ZodGrRect = z.infer<typeof GrRectSchema>\n\n// PCB track segment\nexport const SegmentSchema = z.object({\n  start: z.tuple([z.number(), z.number()]),\n  end: z.tuple([z.number(), z.number()]),\n  width: z.number(),\n  layer: z.string(),\n  net: z.number(),\n  uuid: z.string().optional(),\n})\nexport type ZodSegment = z.infer<typeof SegmentSchema>\n\n// Via schema\nexport const ViaSchema = z.object({\n  at: z.tuple([z.number(), z.number()]),\n  size: z.number(),\n  drill: z.number(),\n  layers: z.array(z.string()),\n  net: z.number(),\n  uuid: z.string(),\n})\nexport type ZodVia = z.infer<typeof ViaSchema>\n\n// Root schema representing the entire KiCad PCB\nexport const KiCadPcbSchema = z.object({\n  version: z.number(),\n  generator: z.string(),\n  generator_version: z.string(),\n  general: GeneralSchema,\n  paper: z.string(),\n  layers: z.array(LayerSchema),\n  setup: SetupSchema,\n  nets: z.array(NetSchema),\n  footprints: z.array(FootprintSchema),\n  gr_rects: z.array(GrRectSchema),\n  segments: z.array(SegmentSchema),\n  vias: z.array(ViaSchema), // Add this line\n})\nexport type ZodKiCadPcb = z.infer<typeof KiCadPcbSchema>\n","import { parseSExpr, type SExpr } from \"../common/parse-sexpr\"\nimport type {\n  At,\n  Effects,\n  Font,\n  Footprint,\n  FpLine,\n  FpText,\n  General,\n  GrRect,\n  KiCadPcb,\n  Layer,\n  Model,\n  Net,\n  Pad,\n  PcbPlotParams,\n  Property,\n  Segment,\n  Setup,\n  Stroke,\n  Via,\n} from \"./types\"\nimport { KiCadPcbSchema } from \"./zod\"\n\n// Now, we'll write functions to convert the parsed s-expressions into our TypeScript types.\n\nexport function parseKiCadPcb(sexpr: SExpr | string): KiCadPcb {\n  if (typeof sexpr === \"string\") {\n    sexpr = parseSExpr(sexpr)\n  }\n\n  if (!Array.isArray(sexpr)) {\n    throw new Error(\"Invalid KiCad Pcb format\")\n  }\n\n  // The root should start with 'kicad_pcb'\n  if (sexpr[0] !== \"kicad_pcb\") {\n    throw new Error(\"Not a KiCad Pcb file\")\n  }\n\n  const pcb: KiCadPcb = {\n    version: 0,\n    generator: \"\",\n    generator_version: \"\",\n    general: { thickness: 0, legacy_teardrops: \"no\" },\n    paper: \"\",\n    layers: [],\n    setup: {\n      pad_to_mask_clearance: 0,\n      allow_soldermask_bridges_in_footprints: \"no\",\n      pcbplotparams: {} as PcbPlotParams,\n    },\n    nets: [],\n    footprints: [],\n    gr_rects: [],\n    segments: [],\n    vias: [],\n  }\n\n  // Process each element in the root s-expression\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"version\":\n        pcb.version = Number(elem[1])\n        break\n      case \"generator\":\n        pcb.generator = elem[1] as string\n        break\n      case \"generator_version\":\n        pcb.generator_version = elem[1] as string\n        break\n      case \"general\":\n        pcb.general = parseGeneral(elem)\n        break\n      case \"paper\":\n        pcb.paper = elem[1] as string\n        break\n      case \"layers\":\n        pcb.layers = parseLayers(elem)\n        break\n      case \"setup\":\n        pcb.setup = parseSetup(elem)\n        break\n      case \"net\":\n        pcb.nets.push(parseNet(elem))\n        break\n      case \"footprint\":\n        pcb.footprints.push(parseFootprint(elem))\n        break\n      case \"gr_rect\":\n        pcb.gr_rects.push(parseGrRect(elem))\n        break\n      case \"segment\":\n        pcb.segments.push(parseSegment(elem))\n        break\n      case \"via\":\n        pcb.vias.push(parseVia(elem))\n        break\n      default:\n        // Handle other elements as needed\n        break\n    }\n  }\n\n  // @ts-ignore\n  return KiCadPcbSchema.parse(pcb)\n}\n\n// Function to parse the 'general' section\nfunction parseGeneral(sexpr: SExpr): General {\n  const general: General = { thickness: 0, legacy_teardrops: \"no\" }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"thickness\":\n        general.thickness = Number(elem[1])\n        break\n      case \"legacy_teardrops\":\n        general.legacy_teardrops = elem[1] as \"no\" | \"yes\"\n        break\n      default:\n        break\n    }\n  }\n\n  return general\n}\n\n// Function to parse the 'layers' section\nfunction parseLayers(sexpr: SExpr): Layer[] {\n  const layers: Layer[] = []\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const id = Number(elem[0])\n    const name = elem[1] as string\n    const type = elem[2] as string\n    const description = elem[3] as string | undefined\n\n    layers.push({ id, name, type, description })\n  }\n\n  return layers\n}\n\n// Function to parse the 'setup' section\nfunction parseSetup(sexpr: SExpr): Setup {\n  const setup: Setup = {\n    pad_to_mask_clearance: 0,\n    allow_soldermask_bridges_in_footprints: \"no\",\n    pcbplotparams: {} as PcbPlotParams,\n  }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    if (key === \"pad_to_mask_clearance\") {\n      setup.pad_to_mask_clearance = Number(elem[1])\n    } else if (key === \"allow_soldermask_bridges_in_footprints\") {\n      setup.allow_soldermask_bridges_in_footprints = elem[1] as \"no\" | \"yes\"\n    } else if (key === \"pcbplotparams\") {\n      setup.pcbplotparams = parsePcbPlotParams(elem)\n    }\n  }\n\n  return setup\n}\n\n// Function to parse 'pcbplotparams'\nfunction parsePcbPlotParams(sexpr: SExpr): PcbPlotParams {\n  const params: any = {}\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    const value = elem[1]\n\n    // Determine the type of value\n    if (value === \"yes\" || value === \"no\") {\n      // @ts-ignore\n      params[key] = value\n      // @ts-ignore\n    } else if (/^-?\\d+\\.?\\d*$/.test(value)) {\n      // @ts-ignore\n      params[key] = Number(value)\n    } else {\n      // @ts-ignore\n      params[key] = value\n    }\n  }\n\n  return params as PcbPlotParams\n}\n\n// Function to parse a 'net' element\nfunction parseNet(sexpr: SExpr): Net {\n  const id = Number(sexpr[1])\n  const name = sexpr[2] as string\n\n  return { id, name }\n}\n\n// Function to parse a 'footprint' element\nfunction parseFootprint(sexpr: SExpr): Footprint {\n  const footprint: Footprint = {\n    footprint: \"\",\n    layer: \"\",\n    uuid: \"\",\n    at: { x: 0, y: 0 },\n    properties: [],\n    fp_lines: [],\n    fp_texts: [],\n    pads: [],\n  }\n\n  footprint.footprint = sexpr[1] as string\n\n  for (let i = 2; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"layer\":\n        footprint.layer = elem[1] as string\n        break\n      case \"uuid\":\n        footprint.uuid = elem[1] as string\n        break\n      case \"at\":\n        footprint.at = parseAt(elem)\n        break\n      case \"descr\":\n        footprint.descr = elem[1] as string\n        break\n      case \"tags\":\n        footprint.tags = elem[1] as string\n        break\n      case \"property\":\n        footprint.properties!.push(parseProperty(elem))\n        break\n      case \"fp_line\":\n        footprint.fp_lines!.push(parseFpLine(elem))\n        break\n      case \"fp_text\":\n        footprint.fp_texts!.push(parseFpText(elem))\n        break\n      case \"pad\":\n        footprint.pads!.push(parsePad(elem))\n        break\n      case \"model\":\n        footprint.model = parseModel(elem)\n        break\n      case \"path\":\n        footprint.path = elem[1] as string\n        break\n      case \"sheetname\":\n        footprint.sheetname = elem[1] as string\n        break\n      case \"sheetfile\":\n        footprint.sheetfile = elem[1] as string\n        break\n      case \"attr\":\n        footprint.attr = elem[1] as string\n        break\n      default:\n        console.log(`Warning: Unhandled key in footprint: ${key}`)\n        break\n    }\n  }\n\n  return footprint\n}\n\n// Function to parse 'at' elements\nfunction parseAt(sexpr: SExpr): At {\n  const x = Number(sexpr[1])\n  const y = Number(sexpr[2])\n  const rotation = sexpr.length > 3 ? Number(sexpr[3]) : undefined\n\n  return { x, y, rotation }\n}\n\n// Function to parse 'property' elements\nfunction parseProperty(sexpr: SExpr): Property {\n  const name = sexpr[1] as string\n  const value = sexpr[2] as string\n  const property: Property = { name, value }\n\n  for (let i = 3; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"at\":\n        property.at = parseAt(elem)\n        break\n      case \"layer\":\n        property.layer = elem[1] as string\n        break\n      case \"uuid\":\n        property.uuid = elem[1] as string\n        break\n      case \"unlocked\":\n        property.unlocked = elem[1] === \"yes\"\n        break\n      case \"hide\":\n        property.hide = elem[1] === \"yes\"\n        break\n      case \"effects\":\n        property.effects = parseEffects(elem)\n        break\n      default:\n        break\n    }\n  }\n\n  return property\n}\n\n// Function to parse 'effects' elements\nfunction parseEffects(sexpr: SExpr): Effects {\n  const effects: Effects = {}\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    if (key === \"font\") {\n      effects.font = parseFont(elem)\n    }\n  }\n\n  return effects\n}\n\n// Function to parse 'font' elements\nfunction parseFont(sexpr: SExpr): Font {\n  const font: Font = { size: [0, 0], thickness: 0 }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    if (key === \"size\") {\n      font.size = [Number(elem[1]), Number(elem[2])]\n    } else if (key === \"thickness\") {\n      font.thickness = Number(elem[1])\n    }\n  }\n\n  return font\n}\n\n// Function to parse 'fp_line' elements\nfunction parseFpLine(sexpr: SExpr): FpLine {\n  const fp_line: FpLine = {\n    start: [0, 0],\n    end: [0, 0],\n    stroke: { width: 0, type: \"\" },\n    layer: \"\",\n  }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"start\":\n        fp_line.start = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"end\":\n        fp_line.end = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"stroke\":\n        fp_line.stroke = parseStroke(elem)\n        break\n      case \"layer\":\n        fp_line.layer = elem[1] as string\n        break\n      case \"uuid\":\n        fp_line.uuid = elem[1] as string\n        break\n      default:\n        break\n    }\n  }\n\n  return fp_line\n}\n\n// Function to parse 'stroke' elements\nfunction parseStroke(sexpr: SExpr): Stroke {\n  const stroke: Stroke = { width: 0, type: \"\" }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    if (key === \"width\") {\n      stroke.width = Number(elem[1])\n    } else if (key === \"type\") {\n      stroke.type = elem[1] as string\n    }\n  }\n\n  return stroke\n}\n\n// Function to parse 'fp_text' elements\nfunction parseFpText(sexpr: SExpr): FpText {\n  const fp_text: FpText = { type: \"\", text: \"\", at: { x: 0, y: 0 }, layer: \"\" }\n\n  fp_text.type = sexpr[1] as string\n  fp_text.text = sexpr[2] as string\n\n  for (let i = 3; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"at\":\n        fp_text.at = parseAt(elem)\n        break\n      case \"layer\":\n        fp_text.layer = elem[1] as string\n        break\n      case \"uuid\":\n        fp_text.uuid = elem[1] as string\n        break\n      case \"effects\":\n        fp_text.effects = parseEffects(elem)\n        break\n      default:\n        break\n    }\n  }\n\n  return fp_text\n}\n\n// Function to parse 'pad' elements\nfunction parsePad(sexpr: SExpr): Pad {\n  const pad: Pad = {\n    number: \"\",\n    type: \"\" as any,\n    // @ts-ignore\n    shape: \"\",\n    at: [0, 0],\n    size: [0, 0],\n    layers: [],\n  }\n\n  pad.number = sexpr[1] as string\n  pad.type = sexpr[2] as \"thru_hole\" | \"smd\"\n  // @ts-ignore\n  pad.shape = sexpr[3] as string\n\n  for (let i = 4; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"drill\":\n        pad.drill = Number(elem[1])\n        break\n      case \"at\":\n        pad.at = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"size\":\n        pad.size = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"layers\":\n        pad.layers = elem.slice(1) as string[]\n        break\n      case \"roundrect_rratio\":\n        pad.roundrect_rratio = Number(elem[1])\n        break\n      case \"net\":\n        pad.net = { id: Number(elem[1]), name: elem[2] as string }\n        break\n      case \"pintype\":\n        pad.pintype = elem[1] as string\n        break\n      case \"uuid\":\n        pad.uuid = elem[1] as string\n        break\n      default:\n        break\n    }\n  }\n\n  return pad\n}\n\n// Function to parse 'model' elements\nfunction parseModel(sexpr: SExpr): Model {\n  const model: Model = { path: \"\" }\n  model.path = sexpr[1] as string\n\n  for (let i = 2; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"offset\":\n        model.offset = parseXYZ(elem)\n        break\n      case \"scale\":\n        model.scale = parseXYZ(elem)\n        break\n      case \"rotate\":\n        model.rotate = parseXYZ(elem)\n        break\n      default:\n        break\n    }\n  }\n\n  return model\n}\n\n// Function to parse 'xyz' elements\nfunction parseXYZ(sexpr: SExpr): { xyz: [number, number, number] } {\n  // @ts-ignore\n  const xyzElem = sexpr.find((e) => Array.isArray(e) && e[0] === \"xyz\") as\n    | SExpr\n    | undefined\n  if (xyzElem && Array.isArray(xyzElem)) {\n    return {\n      xyz: [Number(xyzElem[1]), Number(xyzElem[2]), Number(xyzElem[3])],\n    }\n  }\n  return { xyz: [0, 0, 0] }\n}\n\n// Function to parse 'gr_rect' elements\nfunction parseGrRect(sexpr: SExpr): GrRect {\n  const gr_rect: GrRect = {\n    start: [0, 0],\n    end: [0, 0],\n    stroke: { width: 0, type: \"\" },\n    fill: \"\",\n    layer: \"\",\n  }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"start\":\n        gr_rect.start = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"end\":\n        gr_rect.end = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"stroke\":\n        gr_rect.stroke = parseStroke(elem)\n        break\n      case \"fill\":\n        gr_rect.fill = elem[1] as string\n        break\n      case \"layer\":\n        gr_rect.layer = elem[1] as string\n        break\n      case \"uuid\":\n        gr_rect.uuid = elem[1] as string\n        break\n      default:\n        break\n    }\n  }\n\n  return gr_rect\n}\n\n// Function to parse 'segment' elements\nfunction parseSegment(sexpr: SExpr): Segment {\n  const segment: Segment = {\n    start: [0, 0],\n    end: [0, 0],\n    width: 0,\n    layer: \"\",\n    net: 0,\n  }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"start\":\n        segment.start = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"end\":\n        segment.end = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"width\":\n        segment.width = Number(elem[1])\n        break\n      case \"layer\":\n        segment.layer = elem[1] as string\n        break\n      case \"net\":\n        segment.net = Number(elem[1])\n        break\n      case \"uuid\":\n        segment.uuid = elem[1] as string\n        break\n      default:\n        break\n    }\n  }\n\n  return segment\n}\n\n// Function to parse 'via' elements\nfunction parseVia(sexpr: SExpr): Via {\n  const via: Via = {\n    at: [0, 0],\n    size: 0,\n    drill: 0,\n    layers: [],\n    net: 0,\n    uuid: \"\",\n  }\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const elem = sexpr[i]\n    if (!Array.isArray(elem)) continue\n\n    const key = elem[0]\n    switch (key) {\n      case \"at\":\n        via.at = [Number(elem[1]), Number(elem[2])]\n        break\n      case \"size\":\n        via.size = Number(elem[1])\n        break\n      case \"drill\":\n        via.drill = Number(elem[1])\n        break\n      case \"layers\":\n        via.layers = elem.slice(1) as string[]\n        break\n      case \"net\":\n        via.net = Number(elem[1])\n        break\n      case \"uuid\":\n        via.uuid = elem[1] as string\n        break\n      default:\n        // Handle other properties if needed\n        break\n    }\n  }\n\n  return via\n}\n","import type { AnyCircuitElement } from \"@tscircuit/soup\"\nimport type { KicadProject } from \"./types\"\n\nexport function convertCircuitJsonToKicadPro(\n  circuitJson: AnyCircuitElement[],\n): KicadProject {\n  const projectName = \"testkicadproject\"\n  const dsnFilePath = \"\"\n\n  return {\n    board: {\n      \"3dviewports\": [],\n      design_settings: {\n        defaults: {\n          apply_defaults_to_fp_fields: false,\n          apply_defaults_to_fp_shapes: false,\n          apply_defaults_to_fp_text: false,\n          board_outline_line_width: 0.05,\n          copper_line_width: 0.2,\n          copper_text_italic: false,\n          copper_text_size_h: 1.5,\n          copper_text_size_v: 1.5,\n          copper_text_thickness: 0.3,\n          copper_text_upright: false,\n          courtyard_line_width: 0.05,\n          dimension_precision: 4,\n          dimension_units: 3,\n          dimensions: {\n            arrow_length: 1270000,\n            extension_offset: 500000,\n            keep_text_aligned: true,\n            suppress_zeroes: false,\n            text_position: 0,\n            units_format: 1,\n          },\n          fab_line_width: 0.1,\n          fab_text_italic: false,\n          fab_text_size_h: 1.0,\n          fab_text_size_v: 1.0,\n          fab_text_thickness: 0.15,\n          fab_text_upright: false,\n          other_line_width: 0.1,\n          other_text_italic: false,\n          other_text_size_h: 1.0,\n          other_text_size_v: 1.0,\n          other_text_thickness: 0.15,\n          other_text_upright: false,\n          pads: {\n            drill: 0.762,\n            height: 1.524,\n            width: 1.524,\n          },\n          silk_line_width: 0.1,\n          silk_text_italic: false,\n          silk_text_size_h: 1.0,\n          silk_text_size_v: 1.0,\n          silk_text_thickness: 0.1,\n          silk_text_upright: false,\n          zones: {\n            min_clearance: 0.5,\n          },\n        },\n        diff_pair_dimensions: [],\n        drc_exclusions: [],\n        meta: {\n          version: 2,\n        },\n        rule_severities: {\n          annular_width: \"error\",\n          clearance: \"error\",\n          connection_width: \"warning\",\n          copper_edge_clearance: \"error\",\n          copper_sliver: \"warning\",\n          courtyards_overlap: \"error\",\n          diff_pair_gap_out_of_range: \"error\",\n          diff_pair_uncoupled_length_too_long: \"error\",\n          drill_out_of_range: \"error\",\n          duplicate_footprints: \"warning\",\n          extra_footprint: \"warning\",\n          footprint: \"error\",\n          footprint_symbol_mismatch: \"warning\",\n          footprint_type_mismatch: \"ignore\",\n          hole_clearance: \"error\",\n          hole_near_hole: \"error\",\n          holes_co_located: \"warning\",\n          invalid_outline: \"error\",\n          isolated_copper: \"warning\",\n          item_on_disabled_layer: \"error\",\n          items_not_allowed: \"error\",\n          length_out_of_range: \"error\",\n          lib_footprint_issues: \"warning\",\n          lib_footprint_mismatch: \"warning\",\n          malformed_courtyard: \"error\",\n          microvia_drill_out_of_range: \"error\",\n          missing_courtyard: \"ignore\",\n          missing_footprint: \"warning\",\n          net_conflict: \"warning\",\n          npth_inside_courtyard: \"ignore\",\n          padstack: \"warning\",\n          pth_inside_courtyard: \"ignore\",\n          shorting_items: \"error\",\n          silk_edge_clearance: \"warning\",\n          silk_over_copper: \"warning\",\n          silk_overlap: \"warning\",\n          skew_out_of_range: \"error\",\n          solder_mask_bridge: \"error\",\n          starved_thermal: \"error\",\n          text_height: \"warning\",\n          text_thickness: \"warning\",\n          through_hole_pad_without_hole: \"error\",\n          too_many_vias: \"error\",\n          track_dangling: \"warning\",\n          track_width: \"error\",\n          tracks_crossing: \"error\",\n          unconnected_items: \"error\",\n          unresolved_variable: \"error\",\n          via_dangling: \"warning\",\n          zones_intersect: \"error\",\n        },\n        rules: {\n          max_error: 0.005,\n          min_clearance: 0.0,\n          min_connection: 0.0,\n          min_copper_edge_clearance: 0.5,\n          min_hole_clearance: 0.25,\n          min_hole_to_hole: 0.25,\n          min_microvia_diameter: 0.2,\n          min_microvia_drill: 0.1,\n          min_resolved_spokes: 2,\n          min_silk_clearance: 0.0,\n          min_text_height: 0.8,\n          min_text_thickness: 0.08,\n          min_through_hole_diameter: 0.3,\n          min_track_width: 0.0,\n          min_via_annular_width: 0.1,\n          min_via_diameter: 0.5,\n          solder_mask_to_copper_clearance: 0.0,\n          use_height_for_length_calcs: true,\n        },\n        teardrop_options: [\n          {\n            td_onpadsmd: true,\n            td_onroundshapesonly: false,\n            td_ontrackend: false,\n            td_onviapad: true,\n          },\n        ],\n        teardrop_parameters: [\n          {\n            td_allow_use_two_tracks: true,\n            td_curve_segcount: 0,\n            td_height_ratio: 1.0,\n            td_length_ratio: 0.5,\n            td_maxheight: 2.0,\n            td_maxlen: 1.0,\n            td_on_pad_in_zone: false,\n            td_target_name: \"td_round_shape\",\n            td_width_to_size_filter_ratio: 0.9,\n          },\n          {\n            td_allow_use_two_tracks: true,\n            td_curve_segcount: 0,\n            td_height_ratio: 1.0,\n            td_length_ratio: 0.5,\n            td_maxheight: 2.0,\n            td_maxlen: 1.0,\n            td_on_pad_in_zone: false,\n            td_target_name: \"td_rect_shape\",\n            td_width_to_size_filter_ratio: 0.9,\n          },\n          {\n            td_allow_use_two_tracks: true,\n            td_curve_segcount: 0,\n            td_height_ratio: 1.0,\n            td_length_ratio: 0.5,\n            td_maxheight: 2.0,\n            td_maxlen: 1.0,\n            td_on_pad_in_zone: false,\n            td_target_name: \"td_track_end\",\n            td_width_to_size_filter_ratio: 0.9,\n          },\n        ],\n        track_widths: [],\n        tuning_pattern_settings: {\n          diff_pair_defaults: {\n            corner_radius_percentage: 80,\n            corner_style: 1,\n            max_amplitude: 1.0,\n            min_amplitude: 0.2,\n            single_sided: false,\n            spacing: 1.0,\n          },\n          diff_pair_skew_defaults: {\n            corner_radius_percentage: 80,\n            corner_style: 1,\n            max_amplitude: 1.0,\n            min_amplitude: 0.2,\n            single_sided: false,\n            spacing: 0.6,\n          },\n          single_track_defaults: {\n            corner_radius_percentage: 80,\n            corner_style: 1,\n            max_amplitude: 1.0,\n            min_amplitude: 0.2,\n            single_sided: false,\n            spacing: 0.6,\n          },\n        },\n        via_dimensions: [],\n        zones_allow_external_fillets: false,\n      },\n      ipc2581: {\n        dist: \"\",\n        distpn: \"\",\n        internal_id: \"\",\n        mfg: \"\",\n        mpn: \"\",\n      },\n      layer_presets: [],\n      viewports: [],\n    },\n    boards: [],\n    cvpcb: {\n      equivalence_files: [],\n    },\n    erc: {\n      erc_exclusions: [],\n      meta: {\n        version: 0,\n      },\n      pin_map: [\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2],\n        [0, 2, 0, 1, 0, 0, 1, 0, 2, 2, 2, 2],\n        [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 2],\n        [0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 2],\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n        [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 2],\n        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2],\n        [0, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2, 2],\n        [0, 2, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2],\n        [0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2],\n        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n      ],\n      rule_severities: {\n        bus_definition_conflict: \"error\",\n        bus_entry_needed: \"error\",\n        bus_to_bus_conflict: \"error\",\n        bus_to_net_conflict: \"error\",\n        conflicting_netclasses: \"error\",\n        different_unit_footprint: \"error\",\n        different_unit_net: \"error\",\n        duplicate_reference: \"error\",\n        duplicate_sheet_names: \"error\",\n        endpoint_off_grid: \"warning\",\n        extra_units: \"error\",\n        global_label_dangling: \"warning\",\n        hier_label_mismatch: \"error\",\n        label_dangling: \"error\",\n        lib_symbol_issues: \"warning\",\n        missing_bidi_pin: \"warning\",\n        missing_input_pin: \"warning\",\n        missing_power_pin: \"error\",\n        missing_unit: \"warning\",\n        multiple_net_names: \"warning\",\n        net_not_bus_member: \"warning\",\n        no_connect_connected: \"warning\",\n        no_connect_dangling: \"warning\",\n        pin_not_connected: \"error\",\n        pin_not_driven: \"error\",\n        pin_to_pin: \"warning\",\n        power_pin_not_driven: \"error\",\n        similar_labels: \"warning\",\n        simulation_model_issue: \"ignore\",\n        unannotated: \"error\",\n        unit_value_mismatch: \"error\",\n        unresolved_variable: \"error\",\n        wire_dangling: \"error\",\n      },\n    },\n    libraries: {\n      pinned_footprint_libs: [],\n      pinned_symbol_libs: [],\n    },\n    meta: {\n      filename: `${projectName}.kicad_pro`,\n      version: 1,\n    },\n    net_settings: {\n      classes: [\n        {\n          bus_width: 12,\n          clearance: 0.2,\n          diff_pair_gap: 0.25,\n          diff_pair_via_gap: 0.25,\n          diff_pair_width: 0.2,\n          line_style: 0,\n          microvia_diameter: 0.3,\n          microvia_drill: 0.1,\n          name: \"Default\",\n          pcb_color: \"rgba(0, 0, 0, 0.000)\",\n          schematic_color: \"rgba(0, 0, 0, 0.000)\",\n          track_width: 0.2,\n          via_diameter: 0.6,\n          via_drill: 0.3,\n          wire_width: 6,\n        },\n      ],\n      meta: {\n        version: 3,\n      },\n      net_colors: null,\n      netclass_assignments: null,\n      netclass_patterns: [],\n    },\n    pcbnew: {\n      last_paths: {\n        gencad: \"\",\n        idf: \"\",\n        netlist: \"\",\n        plot: \"\",\n        pos_files: \"\",\n        specctra_dsn: dsnFilePath,\n        step: \"\",\n        svg: \"\",\n        vrml: \"\",\n      },\n      page_layout_descr_file: \"\",\n    },\n    schematic: {\n      annotate_start_num: 0,\n      bom_export_filename: \"\",\n      bom_fmt_presets: [],\n      bom_fmt_settings: {\n        field_delimiter: \",\",\n        keep_line_breaks: false,\n        keep_tabs: false,\n        name: \"CSV\",\n        ref_delimiter: \",\",\n        ref_range_delimiter: \"\",\n        string_delimiter: '\"',\n      },\n      bom_presets: [],\n      bom_settings: {\n        exclude_dnp: false,\n        fields_ordered: [\n          {\n            group_by: false,\n            label: \"Reference\",\n            name: \"Reference\",\n            show: true,\n          },\n          {\n            group_by: true,\n            label: \"Value\",\n            name: \"Value\",\n            show: true,\n          },\n          {\n            group_by: false,\n            label: \"Datasheet\",\n            name: \"Datasheet\",\n            show: true,\n          },\n          {\n            group_by: false,\n            label: \"Footprint\",\n            name: \"Footprint\",\n            show: true,\n          },\n          {\n            group_by: false,\n            label: \"Qty\",\n            name: \"${QUANTITY}\",\n            show: true,\n          },\n          {\n            group_by: true,\n            label: \"DNP\",\n            name: \"${DNP}\",\n            show: true,\n          },\n        ],\n        filter_string: \"\",\n        group_symbols: true,\n        name: \"Grouped By Value\",\n        sort_asc: true,\n        sort_field: \"Reference\",\n      },\n      connection_grid_size: 50.0,\n      drawing: {\n        dashed_lines_dash_length_ratio: 12.0,\n        dashed_lines_gap_length_ratio: 3.0,\n        default_line_thickness: 6.0,\n        default_text_size: 50.0,\n        field_names: [],\n        intersheets_ref_own_page: false,\n        intersheets_ref_prefix: \"\",\n        intersheets_ref_short: false,\n        intersheets_ref_show: false,\n        intersheets_ref_suffix: \"\",\n        junction_size_choice: 3,\n        label_size_ratio: 0.375,\n        operating_point_overlay_i_precision: 3,\n        operating_point_overlay_i_range: \"~A\",\n        operating_point_overlay_v_precision: 3,\n        operating_point_overlay_v_range: \"~V\",\n        overbar_offset_ratio: 1.23,\n        pin_symbol_size: 25.0,\n        text_offset_ratio: 0.15,\n      },\n      legacy_lib_dir: \"\",\n      legacy_lib_list: [],\n      meta: {\n        version: 1,\n      },\n      net_format_name: \"\",\n      page_layout_descr_file: \"\",\n      plot_directory: \"\",\n      spice_current_sheet_as_root: false,\n      spice_external_command: 'spice \"%I\"',\n      spice_model_current_sheet_as_root: true,\n      spice_save_all_currents: false,\n      spice_save_all_dissipations: false,\n      spice_save_all_voltages: false,\n      subpart_first_id: 65,\n      subpart_id_separator: 0,\n    },\n    sheets: [[\"9d9f6711-da5d-46c6-b577-ae6e721f0f67\", \"Root\"]],\n    text_variables: {},\n  }\n}\n","import { z } from \"zod\"\n\nexport const DimensionsSchema = z.object({\n  arrow_length: z.number(),\n  extension_offset: z.number(),\n  keep_text_aligned: z.boolean(),\n  suppress_zeroes: z.boolean(),\n  text_position: z.number(),\n  units_format: z.number(),\n})\n\nexport const PadsSchema = z.object({\n  drill: z.number(),\n  height: z.number(),\n  width: z.number(),\n})\n\nexport const ZonesSchema = z.object({\n  min_clearance: z.number(),\n})\n\nexport const RulesSchema = z.object({\n  max_error: z.number(),\n  min_clearance: z.number(),\n  min_connection: z.number(),\n  min_copper_edge_clearance: z.number(),\n  min_hole_clearance: z.number(),\n  min_hole_to_hole: z.number(),\n  min_microvia_diameter: z.number(),\n  min_microvia_drill: z.number(),\n  min_resolved_spokes: z.number(),\n  min_silk_clearance: z.number(),\n  min_text_height: z.number(),\n  min_text_thickness: z.number(),\n  min_through_hole_diameter: z.number(),\n  min_track_width: z.number(),\n  min_via_annular_width: z.number(),\n  min_via_diameter: z.number(),\n  solder_mask_to_copper_clearance: z.number(),\n  use_height_for_length_calcs: z.boolean(),\n})\n\nexport const TeardropOptionSchema = z.object({\n  td_onpadsmd: z.boolean(),\n  td_onroundshapesonly: z.boolean(),\n  td_ontrackend: z.boolean(),\n  td_onviapad: z.boolean(),\n})\n\nexport const TeardropParameterSchema = z.object({\n  td_allow_use_two_tracks: z.boolean(),\n  td_curve_segcount: z.number(),\n  td_height_ratio: z.number(),\n  td_length_ratio: z.number(),\n  td_maxheight: z.number(),\n  td_maxlen: z.number(),\n  td_on_pad_in_zone: z.boolean(),\n  td_target_name: z.string(),\n  td_width_to_size_filter_ratio: z.number(),\n})\n\nexport const TuningPatternDefaultsSchema = z.object({\n  corner_radius_percentage: z.number(),\n  corner_style: z.number(),\n  max_amplitude: z.number(),\n  min_amplitude: z.number(),\n  single_sided: z.boolean(),\n  spacing: z.number(),\n})\n\nexport const TuningPatternSettingsSchema = z.object({\n  diff_pair_defaults: TuningPatternDefaultsSchema,\n  diff_pair_skew_defaults: TuningPatternDefaultsSchema,\n  single_track_defaults: TuningPatternDefaultsSchema,\n})\n\nexport const Ipc2581Schema = z.object({\n  dist: z.string(),\n  distpn: z.string(),\n  internal_id: z.string(),\n  mfg: z.string(),\n  mpn: z.string(),\n})\n\nexport const CvPcbSchema = z.object({\n  equivalence_files: z.array(z.any()),\n})\n\nexport const ErcSchema = z.object({\n  erc_exclusions: z.array(z.any()),\n  meta: z.object({ version: z.number() }),\n  pin_map: z.array(z.array(z.number())),\n  rule_severities: z.record(z.string(), z.string()),\n})\n\nexport const LibrariesSchema = z.object({\n  pinned_footprint_libs: z.array(z.any()),\n  pinned_symbol_libs: z.array(z.any()),\n})\n\nexport const MetaSchema = z.object({\n  filename: z.string(),\n  version: z.number(),\n})\n\nexport const NetClassSchema = z.object({\n  bus_width: z.number(),\n  clearance: z.number(),\n  diff_pair_gap: z.number(),\n  diff_pair_via_gap: z.number(),\n  diff_pair_width: z.number(),\n  line_style: z.number(),\n  microvia_diameter: z.number(),\n  microvia_drill: z.number(),\n  name: z.string(),\n  pcb_color: z.string(),\n  schematic_color: z.string(),\n  track_width: z.number(),\n  via_diameter: z.number(),\n  via_drill: z.number(),\n  wire_width: z.number(),\n})\n\nexport const NetSettingsSchema = z.object({\n  classes: z.array(NetClassSchema),\n  meta: z.object({ version: z.number() }),\n  net_colors: z.any(),\n  netclass_assignments: z.any(),\n  netclass_patterns: z.array(z.any()),\n})\n\nexport const LastPathsSchema = z.object({\n  gencad: z.string(),\n  idf: z.string(),\n  netlist: z.string(),\n  plot: z.string(),\n  pos_files: z.string(),\n  specctra_dsn: z.string(),\n  step: z.string(),\n  svg: z.string(),\n  vrml: z.string(),\n})\n\nexport const PcbNewSchema = z.object({\n  last_paths: LastPathsSchema,\n  page_layout_descr_file: z.string(),\n})\n\nexport const BomFormatSettingsSchema = z.object({\n  field_delimiter: z.string(),\n  keep_line_breaks: z.boolean(),\n  keep_tabs: z.boolean(),\n  name: z.string(),\n  ref_delimiter: z.string(),\n  ref_range_delimiter: z.string(),\n  string_delimiter: z.string(),\n})\n\nexport const BomFieldSchema = z.object({\n  group_by: z.boolean(),\n  label: z.string(),\n  name: z.string(),\n  show: z.boolean(),\n})\n\nexport const BomSettingsSchema = z.object({\n  exclude_dnp: z.boolean(),\n  fields_ordered: z.array(BomFieldSchema),\n  filter_string: z.string(),\n  group_symbols: z.boolean(),\n  name: z.string(),\n  sort_asc: z.boolean(),\n  sort_field: z.string(),\n})\n\nexport const DrawingSchema = z.object({\n  dashed_lines_dash_length_ratio: z.number(),\n  dashed_lines_gap_length_ratio: z.number(),\n  default_line_thickness: z.number(),\n  default_text_size: z.number(),\n  field_names: z.array(z.any()),\n  intersheets_ref_own_page: z.boolean(),\n  intersheets_ref_prefix: z.string(),\n  intersheets_ref_short: z.boolean(),\n  intersheets_ref_show: z.boolean(),\n  intersheets_ref_suffix: z.string(),\n  junction_size_choice: z.number(),\n  label_size_ratio: z.number(),\n  operating_point_overlay_i_precision: z.number(),\n  operating_point_overlay_i_range: z.string(),\n  operating_point_overlay_v_precision: z.number(),\n  operating_point_overlay_v_range: z.string(),\n  overbar_offset_ratio: z.number(),\n  pin_symbol_size: z.number(),\n  text_offset_ratio: z.number(),\n})\n\nexport const SchematicSchema = z.object({\n  annotate_start_num: z.number(),\n  bom_export_filename: z.string(),\n  bom_fmt_presets: z.array(z.any()),\n  bom_fmt_settings: BomFormatSettingsSchema,\n  bom_presets: z.array(z.any()),\n  bom_settings: BomSettingsSchema,\n  connection_grid_size: z.number(),\n  drawing: DrawingSchema,\n  legacy_lib_dir: z.string(),\n  legacy_lib_list: z.array(z.any()),\n  meta: z.object({ version: z.number() }),\n  net_format_name: z.string(),\n  page_layout_descr_file: z.string(),\n  plot_directory: z.string(),\n  spice_current_sheet_as_root: z.boolean(),\n  spice_external_command: z.string(),\n  spice_model_current_sheet_as_root: z.boolean(),\n  spice_save_all_currents: z.boolean(),\n  spice_save_all_dissipations: z.boolean(),\n  spice_save_all_voltages: z.boolean(),\n  subpart_first_id: z.number(),\n  subpart_id_separator: z.number(),\n})\n\nexport const DefaultsSchema = z.object({\n  apply_defaults_to_fp_fields: z.boolean(),\n  apply_defaults_to_fp_shapes: z.boolean(),\n  apply_defaults_to_fp_text: z.boolean(),\n  board_outline_line_width: z.number(),\n  copper_line_width: z.number(),\n  copper_text_italic: z.boolean(),\n  copper_text_size_h: z.number(),\n  copper_text_size_v: z.number(),\n  copper_text_thickness: z.number(),\n  copper_text_upright: z.boolean(),\n  courtyard_line_width: z.number(),\n  dimension_precision: z.number(),\n  dimension_units: z.number(),\n  dimensions: DimensionsSchema,\n  fab_line_width: z.number(),\n  fab_text_italic: z.boolean(),\n  fab_text_size_h: z.number(),\n  fab_text_size_v: z.number(),\n  fab_text_thickness: z.number(),\n  fab_text_upright: z.boolean(),\n  other_line_width: z.number(),\n  other_text_italic: z.boolean(),\n  other_text_size_h: z.number(),\n  other_text_size_v: z.number(),\n  other_text_thickness: z.number(),\n  other_text_upright: z.boolean(),\n  pads: PadsSchema,\n  silk_line_width: z.number(),\n  silk_text_italic: z.boolean(),\n  silk_text_size_h: z.number(),\n  silk_text_size_v: z.number(),\n  silk_text_thickness: z.number(),\n  silk_text_upright: z.boolean(),\n  zones: ZonesSchema,\n})\n\nexport const DesignSettingsSchema = z.object({\n  defaults: DefaultsSchema,\n  diff_pair_dimensions: z.array(z.any()),\n  drc_exclusions: z.array(z.any()),\n  meta: z.object({ version: z.number() }),\n  rule_severities: z.record(z.string(), z.string()),\n  rules: RulesSchema,\n  teardrop_options: z.array(TeardropOptionSchema),\n  teardrop_parameters: z.array(TeardropParameterSchema),\n  track_widths: z.array(z.any()),\n  tuning_pattern_settings: TuningPatternSettingsSchema,\n  via_dimensions: z.array(z.any()),\n  zones_allow_external_fillets: z.boolean(),\n})\n\nexport const BoardSchema = z.object({\n  \"3dviewports\": z.array(z.any()),\n  design_settings: DesignSettingsSchema,\n  ipc2581: Ipc2581Schema,\n  layer_presets: z.array(z.any()),\n  viewports: z.array(z.any()),\n})\n\nexport const KicadProjectSchema = z.object({\n  board: BoardSchema,\n  boards: z.array(z.any()),\n  cvpcb: CvPcbSchema,\n  erc: ErcSchema,\n  libraries: LibrariesSchema,\n  meta: MetaSchema,\n  net_settings: NetSettingsSchema,\n  pcbnew: PcbNewSchema,\n  schematic: SchematicSchema,\n  sheets: z.array(z.tuple([z.string(), z.string()])),\n  text_variables: z.any(),\n})\n","export interface KicadSch {\n  version: number\n  generator: string\n  generator_version: string\n  uuid: string\n  paper: string\n  lib_symbols?: LibSymbols\n  wires?: Wire[]\n  symbols?: SymbolInstance[]\n  sheet_instances?: SheetInstances\n}\n\nexport interface LibSymbols {\n  symbols: SymbolDefinition[]\n}\n\nexport interface SymbolDefinition {\n  name: string // Symbol name, e.g., \"Device:C\"\n  pin_numbers?: PinNumbers\n  pin_names?: PinNames\n  exclude_from_sim?: YesNo\n  in_bom?: YesNo\n  on_board?: YesNo\n  properties?: Property[]\n  symbols?: SubSymbol[]\n}\n\nexport interface PinNumbers {\n  hide?: boolean\n}\n\nexport interface PinNames {\n  offset: number\n}\n\nexport interface Property {\n  name: string\n  value: string\n  at?: At\n  effects?: Effects\n}\n\nexport interface At {\n  x: number\n  y: number\n  rotation?: number\n}\n\nexport interface Effects {\n  font?: Font\n  justify?: string\n  hide?: boolean\n}\n\nexport interface Font {\n  size: [number, number]\n}\n\nexport interface SubSymbol {\n  name: string\n  polylines?: Polyline[]\n  rectangles?: Rectangle[]\n  pins?: Pin[]\n}\n\nexport interface Polyline {\n  pts: Point[]\n  stroke: Stroke\n  fill: Fill\n}\n\nexport interface Rectangle {\n  start: Point\n  end: Point\n  stroke: Stroke\n  fill: Fill\n}\n\nexport interface Pin {\n  type: string\n  shape: string\n  at: At\n  length: number\n  name: PinName\n  number: PinNumber\n}\n\nexport interface PinName {\n  name: string\n  effects?: Effects\n}\n\nexport interface PinNumber {\n  number: string\n  effects?: Effects\n}\n\nexport interface Stroke {\n  width: number\n  type?: string\n}\n\nexport interface Fill {\n  type: string\n}\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport interface SymbolInstance {\n  lib_id: string\n  at: At\n  unit: number\n  exclude_from_sim?: YesNo\n  in_bom?: YesNo\n  on_board?: YesNo\n  dnp?: YesNo\n  fields_autoplaced?: YesNo\n  uuid?: string\n  properties?: Property[]\n  pins?: SymbolPin[]\n  instances?: Instances\n}\n\nexport interface SymbolPin {\n  number: string\n  uuid?: string\n}\n\nexport interface Instances {\n  project: ProjectInstance\n}\n\nexport interface ProjectInstance {\n  name: string\n  path: PathInstance\n}\n\nexport interface PathInstance {\n  path: string\n  reference: string\n  unit: number\n}\n\nexport interface Wire {\n  pts: Point[]\n  stroke: Stroke\n  uuid?: string\n}\n\nexport interface SheetInstances {\n  path: SheetPath\n}\n\nexport interface SheetPath {\n  path: string\n  page: string\n}\n\nexport type YesNo = \"yes\" | \"no\"\n","import { z } from \"zod\"\n\n// Define YesNo enum\nconst YesNo = z.enum([\"yes\", \"no\"])\n\n// Point schema\nconst PointSchema = z.object({\n  x: z.number(),\n  y: z.number(),\n})\n\n// At schema\nconst AtSchema = z.object({\n  x: z.number(),\n  y: z.number(),\n  rotation: z.number().optional(),\n})\n\n// Font schema\nconst FontSchema = z.object({\n  size: z.tuple([z.number(), z.number()]),\n})\n\n// Effects schema\nconst EffectsSchema = z.object({\n  font: FontSchema.optional(),\n  justify: z.string().optional(),\n  hide: z.boolean().optional(),\n})\n\n// PinName and PinNumber schemas\nconst PinNameSchema = z.object({\n  name: z.string(),\n  effects: EffectsSchema.optional(),\n})\n\nconst PinNumberSchema = z.object({\n  number: z.string(),\n  effects: EffectsSchema.optional(),\n})\n\n// Stroke schema\nconst StrokeSchema = z.object({\n  width: z.number(),\n  type: z.string().optional(),\n})\n\n// Fill schema\nconst FillSchema = z.object({\n  type: z.string(),\n})\n\n// Polyline schema\nconst PolylineSchema = z.object({\n  pts: z.array(PointSchema),\n  stroke: StrokeSchema,\n  fill: FillSchema,\n})\n\n// Rectangle schema\nconst RectangleSchema = z.object({\n  start: PointSchema,\n  end: PointSchema,\n  stroke: StrokeSchema,\n  fill: FillSchema,\n})\n\n// Pin schema\nconst PinSchema = z.object({\n  type: z.string(),\n  shape: z.string(),\n  at: AtSchema,\n  length: z.number(),\n  name: PinNameSchema,\n  number: PinNumberSchema,\n})\n\n// SubSymbol schema\nconst SubSymbolSchema = z.object({\n  name: z.string(),\n  polylines: z.array(PolylineSchema).optional(),\n  rectangles: z.array(RectangleSchema).optional(),\n  pins: z.array(PinSchema).optional(),\n})\n\n// Property schema\nconst PropertySchema = z.object({\n  name: z.string(),\n  value: z.string(),\n  at: AtSchema.optional(),\n  effects: EffectsSchema.optional(),\n})\n\n// PinNumbers schema\nconst PinNumbersSchema = z.object({\n  hide: z.boolean().optional(),\n})\n\n// PinNames schema\nconst PinNamesSchema = z.object({\n  offset: z.number(),\n})\n\n// SymbolDefinition schema\nconst SymbolDefinitionSchema = z.object({\n  name: z.string(),\n  pin_numbers: PinNumbersSchema.optional(),\n  pin_names: PinNamesSchema.optional(),\n  exclude_from_sim: YesNo.optional(),\n  in_bom: YesNo.optional(),\n  on_board: YesNo.optional(),\n  properties: z.array(PropertySchema).optional(),\n  symbols: z.array(SubSymbolSchema).optional(),\n})\n\n// LibSymbols schema\nconst LibSymbolsSchema = z.object({\n  symbols: z.array(SymbolDefinitionSchema),\n})\n\n// SymbolPin schema\nconst SymbolPinSchema = z.object({\n  number: z.string(),\n  uuid: z.string().optional(),\n})\n\n// PathInstance schema\nconst PathInstanceSchema = z.object({\n  path: z.string(),\n  reference: z.string(),\n  unit: z.number(),\n})\n\n// ProjectInstance schema\nconst ProjectInstanceSchema = z.object({\n  name: z.string(),\n  path: PathInstanceSchema,\n})\n\n// Instances schema\nconst InstancesSchema = z.object({\n  project: ProjectInstanceSchema,\n})\n\n// SymbolInstance schema\nconst SymbolInstanceSchema = z.object({\n  lib_id: z.string(),\n  at: AtSchema,\n  unit: z.number(),\n  exclude_from_sim: YesNo.optional(),\n  in_bom: YesNo.optional(),\n  on_board: YesNo.optional(),\n  dnp: YesNo.optional(),\n  fields_autoplaced: YesNo.optional(),\n  uuid: z.string().optional(),\n  properties: z.array(PropertySchema).optional(),\n  pins: z.array(SymbolPinSchema).optional(),\n  instances: InstancesSchema.optional(),\n})\n\n// Wire schema\nconst WireSchema = z.object({\n  pts: z.array(PointSchema),\n  stroke: StrokeSchema,\n  uuid: z.string().optional(),\n})\n\n// SheetPath schema\nconst SheetPathSchema = z.object({\n  path: z.string(),\n  page: z.string(),\n})\n\n// SheetInstances schema\nconst SheetInstancesSchema = z.object({\n  path: SheetPathSchema,\n})\n\n// KicadSch schema\nexport const KicadSchSchema = z.object({\n  version: z.number(),\n  generator: z.string(),\n  generator_version: z.string(),\n  uuid: z.string(),\n  paper: z.string(),\n  lib_symbols: LibSymbolsSchema.optional(),\n  wires: z.array(WireSchema).optional(),\n  symbols: z.array(SymbolInstanceSchema).optional(),\n  sheet_instances: SheetInstancesSchema.optional(),\n})\n\nexport {\n  YesNo as YesNoSchema,\n  PointSchema,\n  AtSchema,\n  FontSchema,\n  EffectsSchema,\n  PinNameSchema,\n  PinNumberSchema,\n  StrokeSchema,\n  FillSchema,\n  PolylineSchema,\n  RectangleSchema,\n  PinSchema,\n  SubSymbolSchema,\n  PropertySchema,\n  PinNumbersSchema,\n  PinNamesSchema,\n  SymbolDefinitionSchema,\n  LibSymbolsSchema,\n  SymbolPinSchema,\n  PathInstanceSchema,\n  ProjectInstanceSchema,\n  InstancesSchema,\n  SymbolInstanceSchema,\n  WireSchema,\n  SheetPathSchema,\n  SheetInstancesSchema,\n}\n","import type { SExpr } from \"../common/parse-sexpr\"\nimport type {\n  At,\n  Effects,\n  Fill,\n  Font,\n  Instances,\n  KicadSch,\n  LibSymbols,\n  PathInstance,\n  Pin,\n  PinName,\n  PinNames,\n  PinNumber,\n  PinNumbers,\n  Point,\n  Polyline,\n  ProjectInstance,\n  Property,\n  Rectangle,\n  SheetInstances,\n  SheetPath,\n  Stroke,\n  SubSymbol,\n  SymbolDefinition,\n  SymbolInstance,\n  SymbolPin,\n  Wire,\n  YesNo,\n} from \"./types\"\n\n// Function to parse the SExpr into the KicadSch structure\nexport function parseKicadSch(sexpr: SExpr): KicadSch {\n  if (!Array.isArray(sexpr)) {\n    throw new Error(\"Invalid S-expression format for kicad_sch.\")\n  }\n\n  const root = sexpr as SExpr[]\n  const kicadSch: Partial<KicadSch> = {}\n\n  // The first element should be 'kicad_sch'\n  if (root[0] !== \"kicad_sch\") {\n    throw new Error(\"Not a kicad_sch file.\")\n  }\n\n  // Process the rest of the elements\n  for (let i = 1; i < root.length; i++) {\n    const element = root[i]\n    if (!Array.isArray(element)) continue\n\n    const [key, ...args] = element\n\n    switch (key) {\n      case \"version\":\n        kicadSch.version = parseInt(args[0] as string, 10)\n        break\n\n      case \"generator\":\n        kicadSch.generator = args[0] as string\n        break\n\n      case \"generator_version\":\n        kicadSch.generator_version = args[0] as string\n        break\n\n      case \"uuid\":\n        kicadSch.uuid = args[0] as string\n        break\n\n      case \"paper\":\n        kicadSch.paper = args[0] as string\n        break\n\n      case \"lib_symbols\":\n        kicadSch.lib_symbols = parseLibSymbols(element)\n        break\n\n      case \"wire\":\n        if (!kicadSch.wires) kicadSch.wires = []\n        kicadSch.wires.push(parseWire(element))\n        break\n\n      case \"symbol\":\n        if (!kicadSch.symbols) kicadSch.symbols = []\n        kicadSch.symbols.push(parseSymbolInstance(element))\n        break\n\n      case \"sheet_instances\":\n        kicadSch.sheet_instances = parseSheetInstances(element)\n        break\n\n      default:\n        // Handle other keys if necessary\n        break\n    }\n  }\n\n  return kicadSch as KicadSch\n}\n\n// Parser functions for different elements\n\nfunction parseLibSymbols(sexpr: SExpr): LibSymbols {\n  const symbols: SymbolDefinition[] = []\n\n  for (let i = 1; i < sexpr.length; i++) {\n    const element = sexpr[i] as SExpr[]\n    if (element[0] === \"symbol\") {\n      symbols.push(parseSymbolDefinition(element))\n    }\n  }\n\n  return { symbols }\n}\n\nfunction parseSymbolDefinition(sexpr: SExpr): SymbolDefinition {\n  const symbolDef: Partial<SymbolDefinition> = {}\n  const [, name, ...args] = sexpr\n  symbolDef.name = name as string\n  symbolDef.properties = []\n  symbolDef.symbols = []\n\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n\n    switch (key) {\n      case \"pin_numbers\":\n        symbolDef.pin_numbers = parsePinNumbers(element)\n        break\n\n      case \"pin_names\":\n        symbolDef.pin_names = parsePinNames(element)\n        break\n\n      case \"exclude_from_sim\":\n        symbolDef.exclude_from_sim = rest[0] as YesNo\n        break\n\n      case \"in_bom\":\n        symbolDef.in_bom = rest[0] as YesNo\n        break\n\n      case \"on_board\":\n        symbolDef.on_board = rest[0] as YesNo\n        break\n\n      case \"property\":\n        symbolDef.properties!.push(parseProperty(element))\n        break\n\n      case \"symbol\":\n        symbolDef.symbols!.push(parseSubSymbol(element))\n        break\n\n      default:\n        // Handle other keys if necessary\n        break\n    }\n  }\n\n  return symbolDef as SymbolDefinition\n}\n\nfunction parsePinNumbers(sexpr: SExpr): PinNumbers {\n  const pinNumbers: PinNumbers = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    if (key === \"hide\") {\n      pinNumbers.hide = true\n    }\n  }\n  return pinNumbers\n}\n\nfunction parsePinNames(sexpr: SExpr): PinNames {\n  const pinNames: PinNames = {} as any\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, value] = element\n    if (key === \"offset\") {\n      pinNames.offset = parseFloat(value as string)\n    }\n  }\n  return pinNames\n}\n\nfunction parseProperty(sexpr: SExpr): Property {\n  const [, name, value, ...args] = sexpr\n  const property: Partial<Property> = {\n    name: name as string,\n    value: value as string,\n  }\n\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"at\":\n        property.at = parseAt(element)\n        break\n      case \"effects\":\n        property.effects = parseEffects(element)\n        break\n      default:\n        break\n    }\n  }\n\n  return property as Property\n}\n\nfunction parseAt(sexpr: SExpr): At {\n  const [, xStr, yStr, rotationStr] = sexpr\n  const at: At = {\n    x: parseFloat(xStr as string),\n    y: parseFloat(yStr as string),\n  }\n  if (rotationStr) {\n    at.rotation = parseFloat(rotationStr as string)\n  }\n  return at\n}\n\nfunction parseEffects(sexpr: SExpr): Effects {\n  const effects: Partial<Effects> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"font\":\n        effects.font = parseFont(element)\n        break\n      case \"justify\":\n        effects.justify = rest[0] as string\n        break\n      case \"hide\":\n        effects.hide = rest[0] === \"yes\"\n        break\n      default:\n        break\n    }\n  }\n  return effects as Effects\n}\n\nfunction parseFont(sexpr: SExpr): Font {\n  const font: Partial<Font> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, xStr, yStr] = element\n    if (key === \"size\") {\n      font.size = [parseFloat(xStr as string), parseFloat(yStr as string)]\n    }\n  }\n  return font as Font\n}\n\nfunction parseSubSymbol(sexpr: SExpr): SubSymbol {\n  const [, name, ...args] = sexpr\n  const subSymbol: Partial<SubSymbol> = { name: name as string }\n\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"polyline\":\n        if (!subSymbol.polylines) subSymbol.polylines = []\n        subSymbol.polylines.push(parsePolyline(element))\n        break\n      case \"rectangle\":\n        if (!subSymbol.rectangles) subSymbol.rectangles = []\n        subSymbol.rectangles.push(parseRectangle(element))\n        break\n      case \"pin\":\n        if (!subSymbol.pins) subSymbol.pins = []\n        subSymbol.pins.push(parsePin(element))\n        break\n      default:\n        break\n    }\n  }\n\n  return subSymbol as SubSymbol\n}\n\nfunction parsePolyline(sexpr: SExpr): Polyline {\n  const polyline: Partial<Polyline> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"pts\":\n        polyline.pts = parsePoints(element)\n        break\n      case \"stroke\":\n        polyline.stroke = parseStroke(element)\n        break\n      case \"fill\":\n        polyline.fill = parseFill(element)\n        break\n      default:\n        break\n    }\n  }\n  return polyline as Polyline\n}\n\nfunction parseRectangle(sexpr: SExpr): Rectangle {\n  const rectangle: Partial<Rectangle> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"start\":\n        rectangle.start = parsePoint(element)\n        break\n      case \"end\":\n        rectangle.end = parsePoint(element)\n        break\n      case \"stroke\":\n        rectangle.stroke = parseStroke(element)\n        break\n      case \"fill\":\n        rectangle.fill = parseFill(element)\n        break\n      default:\n        break\n    }\n  }\n  return rectangle as Rectangle\n}\n\nfunction parsePoints(sexpr: SExpr): Point[] {\n  const points: Point[] = []\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    if (element[0] === \"xy\") {\n      points.push(parsePoint(element))\n    }\n  }\n  return points\n}\n\nfunction parsePoint(sexpr: SExpr): Point {\n  const [, xStr, yStr] = sexpr\n  return {\n    x: parseFloat(xStr as string),\n    y: parseFloat(yStr as string),\n  }\n}\n\nfunction parseStroke(sexpr: SExpr): Stroke {\n  const stroke: Partial<Stroke> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, value] = element\n    switch (key) {\n      case \"width\":\n        stroke.width = parseFloat(value as string)\n        break\n      case \"type\":\n        stroke.type = value as string\n        break\n      default:\n        break\n    }\n  }\n  return stroke as Stroke\n}\n\nfunction parseFill(sexpr: SExpr): Fill {\n  const [, ...rest] = sexpr\n  const fill: Partial<Fill> = {}\n  for (const element of rest) {\n    if (!Array.isArray(element)) continue\n    const [key, value] = element\n    if (key === \"type\") {\n      fill.type = value as string\n    }\n  }\n  return fill as Fill\n}\n\nfunction parsePin(sexpr: SExpr): Pin {\n  const [, type, shape, ...args] = sexpr\n  const pin: Partial<Pin> = { type: type as string, shape: shape as string }\n\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"at\":\n        pin.at = parseAt(element)\n        break\n      case \"length\":\n        pin.length = parseFloat(rest[0] as string)\n        break\n      case \"name\":\n        pin.name = parsePinNameOrNumber(element) as PinName\n        break\n      case \"number\":\n        pin.number = parsePinNameOrNumber(element) as PinNumber\n        break\n      default:\n        break\n    }\n  }\n\n  return pin as Pin\n}\n\nfunction parsePinNameOrNumber(sexpr: SExpr): PinName | PinNumber {\n  const [, value, ...args] = sexpr\n  const pinData: Partial<PinName | PinNumber> = {\n    name: value as string,\n    number: value as string,\n  }\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    if (key === \"effects\") {\n      pinData.effects = parseEffects(element)\n    }\n  }\n  return pinData as PinName | PinNumber\n}\n\nfunction parseSymbolInstance(sexpr: SExpr): SymbolInstance {\n  const symbolInstance: Partial<SymbolInstance> = {}\n  const [, ...args] = sexpr\n  symbolInstance.properties = []\n  symbolInstance.pins = []\n\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"lib_id\":\n        symbolInstance.lib_id = rest[0] as string\n        break\n      case \"at\":\n        symbolInstance.at = parseAt(element)\n        break\n      case \"unit\":\n        symbolInstance.unit = parseInt(rest[0] as string, 10)\n        break\n      case \"exclude_from_sim\":\n        symbolInstance.exclude_from_sim = rest[0] as YesNo\n        break\n      case \"in_bom\":\n        symbolInstance.in_bom = rest[0] as YesNo\n        break\n      case \"on_board\":\n        symbolInstance.on_board = rest[0] as YesNo\n        break\n      case \"dnp\":\n        symbolInstance.dnp = rest[0] as YesNo\n        break\n      case \"fields_autoplaced\":\n        symbolInstance.fields_autoplaced = rest[0] as YesNo\n        break\n      case \"uuid\":\n        symbolInstance.uuid = rest[0] as string\n        break\n      case \"property\":\n        symbolInstance.properties!.push(parseProperty(element))\n        break\n      case \"pin\":\n        symbolInstance.pins!.push(parseSymbolPin(element))\n        break\n      case \"instances\":\n        symbolInstance.instances = parseInstances(element)\n        break\n      default:\n        break\n    }\n  }\n\n  return symbolInstance as SymbolInstance\n}\n\nfunction parseSymbolPin(sexpr: SExpr): SymbolPin {\n  const [, numberStr, ...args] = sexpr\n  const pin: Partial<SymbolPin> = { number: numberStr as string }\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, value] = element\n    if (key === \"uuid\") {\n      pin.uuid = value as string\n    }\n  }\n  return pin as SymbolPin\n}\n\nfunction parseInstances(sexpr: SExpr): Instances {\n  const projectInstance: Partial<ProjectInstance> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    if (key === \"project\") {\n      projectInstance.name = rest[0] as string\n      projectInstance.path = parsePathInstance(element)\n    }\n  }\n  return { project: projectInstance as ProjectInstance }\n}\n\nfunction parsePathInstance(sexpr: SExpr): PathInstance {\n  const [, name, ...args] = sexpr\n  const pathInstance: Partial<PathInstance> = {}\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    if (key === \"path\") {\n      pathInstance.path = rest[0] as string\n      for (const subElement of rest.slice(1)) {\n        if (!Array.isArray(subElement)) continue\n        const [subKey, subValue] = subElement\n        if (subKey === \"reference\") {\n          pathInstance.reference = subValue as string\n        } else if (subKey === \"unit\") {\n          pathInstance.unit = parseInt(subValue as string, 10)\n        }\n      }\n    }\n  }\n  return pathInstance as PathInstance\n}\n\nfunction parseWire(sexpr: SExpr): Wire {\n  const wire: Partial<Wire> = {}\n  for (const element of sexpr.slice(1)) {\n    if (!Array.isArray(element)) continue\n    const [key, ...rest] = element\n    switch (key) {\n      case \"pts\":\n        wire.pts = parsePoints(element)\n        break\n      case \"stroke\":\n        wire.stroke = parseStroke(element)\n        break\n      case \"uuid\":\n        wire.uuid = rest[0] as string\n        break\n      default:\n        break\n    }\n  }\n  return wire as Wire\n}\n\nfunction parseSheetInstances(sexpr: SExpr): SheetInstances {\n  const [, pathElement] = sexpr\n  const sheetInstances: SheetInstances = {\n    path: parseSheetPath(pathElement as SExpr),\n  }\n  return sheetInstances\n}\n\nfunction parseSheetPath(sexpr: SExpr): SheetPath {\n  const [, pathStr, ...args] = sexpr\n  const sheetPath: SheetPath = { path: pathStr as string, page: \"\" }\n  for (const element of args) {\n    if (!Array.isArray(element)) continue\n    const [key, value] = element\n    if (key === \"page\") {\n      sheetPath.page = value as string\n    }\n  }\n  return sheetPath\n}\n","import * as types from \"./types\";\nimport * as zod from \"./zod\";\nimport * as parse from \"./parse-kicad-sch\";\n\nexport const KicadSch = {\n  ...types,\n  ...zod,\n  ...parse,\n};\n\n// Type-only exports\nexport type { KicadSch as Schema } from \"./types\";\n"],"mappings":"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","names":["transformPCBElements","scale","pcb_smtpad","pcb_plated_hole","pcb_hole","transformPCBElements","scale","generateUniqueId","rotation","z","AtSchema","EffectsSchema","FontSchema","PropertySchema","StrokeSchema","z","parseProperty","parseAt","parseEffects","parseFont","parseStroke"]}